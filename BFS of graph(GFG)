//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        //answer vector integer
        vector<int> ans;
        //visited array to check if the node is visited or not
        vector<int> visited(V , 0);
        ////queue for implementing the bfs
        queue<int> q;
        
        q.push(0);//pushing the starting node
        
        //we will mark that node in the visited array
        visited[0] = 1;
        
        while(!q.empty()){
            int x = q.front();
            ans.push_back(x);
            q.pop();
            // now we take the neighbours of that top element that we have poped
            //and we will push it into the queue accordingly if it is not visited
            for( int i = 0 ; i < adj[x].size() ; i++){
                if( visited[adj[x][i]] != 1){
                    //pushing that into the queue
                    q.push(adj[x][i]);
                    //now mark that node as visited
                    visited[adj[x][i]] = 1;
                }
            }
        }
        
        return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >>

            E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            // 		adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.bfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends
