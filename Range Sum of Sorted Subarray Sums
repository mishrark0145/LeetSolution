// TC = O(n^2 + n^2Logn) and space is O(n^2)
class Solution {
public:
    int rangeSum(vector<int>& nums, int n, int left, int right) {
        int mod = 1000000007;
        vector<int> subarraySum;
        // O(n^2)
        for(int i = 0 ; i < n ; i++){
            int sum = 0;
            for(int j = i ; j < n ; j++){
                sum += nums[j];
                subarraySum.push_back(sum);
            }
        }
        // sort the subarraySum
        // O(2n^2Logn)
        sort(subarraySum.begin(), subarraySum.end());
        // since it is one based indexing so we will subtract from left and right 1
        left--;
        right--;
        int ans = 0;
        // O(n^2);
        for(int i = left ; i <= right ; i++){
            ans += subarraySum[i];
            ans = ans % mod;
        }
        return ans;
    }
};
