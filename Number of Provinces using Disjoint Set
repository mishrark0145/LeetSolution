class Solution {
public:

    vector<int> parent;
    vector<int> size;

    void array( int n){
        //resize the arrays size and parent
        parent.resize(n);
        size.resize(n);
        //now we will make all the parent to itself and size to 1
        for( int i = 0 ; i < n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findParent( int node){
        if( parent[node] == node){
            return node;
        }
        return parent[node] = findParent(parent[node]);
    }

    void unionBySize( int u , int v){
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if( ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] = size[ulp_u] + size[ulp_v];
        }
        else{
            parent[ulp_u] = ulp_v;
            size[ulp_v] = size[ulp_v] + size[ulp_u];
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        //we will solve this using disjoint set 
        //here we will use the fact that i and j have the connection and that will be our edges for the disjoint set DS

        int V = isConnected.size();
        array(V); 

        //now we will traverse the edges 
        //Time Complexity = O(V^2*aplha(V))
        for( int i = 0 ; i < V ; i++){
            for( int j = 0 ; j < V ; j++){
                //if there is a edge then we will proceed
                if( isConnected[i][j] == 1){
                    //if the ultimate parent are not equal then we will make them in union
                    if( findParent(i) != findParent(j)){
                        unionBySize(i , j);
                    }
                }    
            }
        }
        //now the parent node will only have the parent that are ultimate parents that means they are the parent of the connected components
        int count = 0;
        for( int i = 0 ; i < V ; i++){
            if( parent[i] == i){
                count++;
            }
        }
        return count;
    }
};
