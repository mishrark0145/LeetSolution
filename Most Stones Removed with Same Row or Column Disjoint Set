class DisjointSet{
public:
    vector<int> size , parent;

    DisjointSet(int n){
        size.resize(n);
        parent.resize(n);
        for(int i = 0 ; i < n ; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findParent(int node){
        if(parent[node] == node){
            return node;
        }
        return parent[node] = findParent(parent[node]);
    }

    void unionBySize(int u , int v){
        int ulp_u = findParent(u);
        int ulp_v = findParent(v);
        if(ulp_u == ulp_v) return;

        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v]; 
        }
    }

};

class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        //here we will treat row and column as nodes for the disjoint set data structure the answer for maximum no of stones that
        //can be removed is no of n - no of connected components
        //now we have to find the col and row
        int maxrow = 0;
        int maxcol = 0;
        for(auto it : stones){
            maxrow = max(maxrow , it[0]);
            maxcol = max(maxcol , it[1]);
        }

        //now the total number of nodes in the disjoint set would be maxrow + maxcol + 1 + 1
        DisjointSet ds(maxrow + maxcol + 1 + 1);

        //now we will iterate through the stones to find the row and col number accordingly to add to the data structure
        //we will be using the row nodes as 0 1 2 and so on and the col number would be = col + maxrow + 1
        //we just need the nodes in disjoint set which are involved in having a stone. so we store the rows and columns
        //in map as they will have sotnes. and we jsut need to count them once for ultimate parents.
        unordered_map<int,int> stoneNodes;
        for(auto it : stones){
            int nodeRow = it[0];
            int nodeCol = maxrow + it[1] + 1;
            //now we will make the union
            ds.unionBySize(nodeRow , nodeCol);
            stoneNodes[nodeRow] = 1;
            stoneNodes[nodeCol] = 1;
        }

        int count = 0;
        for(auto it : stoneNodes){
            //if the ultimate parent of the nodeRow is itself then we will count++;
            if(ds.findParent(it.first) == it.first){
                count++;
            }
        }
        //return the answer number of stones - number of componenets
        int n = stones.size();
        return n - count;
    }
};
