// Not so better approach O(N^3)

class Solution {
private:
    static int minCostHelper(vector<int>& cuts, int left, int right, unordered_map<string, int>& memo) {
        if (right - left <= 1) return 0;

        // Create a string key for the current subproblem
        string key = to_string(left) + "," + to_string(right);

        if(memo[key] != 0) return memo[key];
        int cost = right - left;
        int minCost = INT_MAX;
        
        for (int cut : cuts) {
            if (cut > left && cut < right) {
                int leftCost = minCostHelper(cuts, left, cut, memo);
                int rightCost = minCostHelper(cuts, cut, right, memo);
                minCost = min(minCost, leftCost + rightCost + cost);
            }
        }
        // Store the result in memo before returning
        return memo[key] = (minCost == INT_MAX ? 0 : minCost);
    }

public:
    int minCost(int n, vector<int>& cuts) {
        sort(cuts.begin(), cuts.end());
        unordered_map<string, int> memo;
        return minCostHelper(cuts, 0, n, memo);
    }
};


// 2nd solution
// O(len^3)
// O(len^3)
class Solution {
public:
    int findMinCost(int left, int right, vector<int>& newCuts, vector<vector<int>>& memo){
        if(left > right) return 0;
        
        // Check if the result is already computed
        if(memo[left][right] != -1) return memo[left][right];
        
        // Initialize the minimum cost to a large value (infinity)
        int miniCost = INT_MAX;
        
        // Try cutting at each possible position and calculate the cost
        for(int ind = left ; ind <= right ; ind++){
            // Calculate the cost of making this cut and recursively solve for the left and right parts
            int cost = newCuts[right + 1] - newCuts[left - 1] 
                       + findMinCost(left, ind - 1, newCuts, memo) 
                       + findMinCost(ind + 1, right, newCuts, memo); 
            miniCost = min(miniCost, cost);
        }

        // Store the result in memoization table and return it
        return memo[left][right] = miniCost;
    }
    int minCost(int n, vector<int>& cuts) {
        // we can solve this using partitioning dp 
        // Now first here we have to sort the cuts array bcz we want that when we apply any cut the two part we will get it should be
        // indpendent from each other
        // now for the cost part we can use the indexes of the cut to find the length of the stick we wanted to cut
        // for this we have to add 0 at the starting of the cut and length at the back
        // so that when we are indexes i and j then length of the stick would be cuts[j + 1] - cuts[i - 1]
        // new vector
        int len = cuts.size();
        vector<int> newCuts(len + 2, 0);
        newCuts[len + 1] = n;

        // now sort the cuts array
        sort(cuts.begin(), cuts.end());
        for(int i = 1 ; i <= len ; i++){
            newCuts[i] = cuts[i - 1];
        }

        // Initialize a memoization table with -1 (uncomputed states)
        vector<vector<int>> memo(len + 2, vector<int>(len + 2, -1));
        
        return findMinCost(1, len, newCuts, memo);
    }
};

// Tabulation
// O(len^3) and space is O(len^2)
class Solution {
public:
    int minCost(int n, vector<int>& cuts) {
        // we can solve this using partitioning dp 
        // Now first here we have to sort the cuts array bcz we want that when we apply any cut the two part we will get it should be
        // indpendent from each other
        // now for the cost part we can use the indexes of the cut to find the length of the stick we wanted to cut
        // for this we have to add 0 at the starting of the cut and length at the back
        // so that when we are indexes i and j then length of the stick would be cuts[j + 1] - cuts[i - 1]
        // new vector
        int len = cuts.size();
        vector<int> newCuts(len + 2, 0);
        newCuts[len + 1] = n;

        // now sort the cuts array
        sort(cuts.begin(), cuts.end());
        for(int i = 1 ; i <= len ; i++){
            newCuts[i] = cuts[i - 1];
        }

        // Initialize a Tabulation table
        vector<vector<int>> memo(len + 2, vector<int>(len + 2, 0));
        
        for(int left = len ; left >= 1 ; left--){
            for(int right = 1 ; right <= len ; right++){
                // if it crosses just continue
                if(left > right) continue;

                int miniCost = INT_MAX;
                // Try cutting at each possible position and calculate the cost
                for(int ind = left ; ind <= right ; ind++){
                    // Calculate the cost of making this cut and recursively solve for the left and right parts
                    int cost = newCuts[right + 1] - newCuts[left - 1] + memo[left][ind - 1] + memo[ind + 1][right]; 
                    miniCost = min(miniCost, cost);
                }

                // Store the result in memoization table and return it
                memo[left][right] = miniCost;
            }
        }
        return memo[1][len];
    }
};
