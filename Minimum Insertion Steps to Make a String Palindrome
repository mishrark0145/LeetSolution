class Solution {
public:
    int minInsertions(string s) {
        //to find the minimum insertion to make the string palidromic
        //we can make the longest palidromic subsequence intact
        //and then the rest of the characters can be put to the other side in reverse order thus can make the string palindormic
        //ex abcaa here the lps is aaa and the bc is not palindromic
        //we can do a b c a c b a now this string becomes palindrome
        //so the minimum no of opertion = length of the string - longest palindromic subsequence
        int n = s.size();
        string t = s;
        reverse( t.begin() , t.end());
        vector<vector<int>> dp( n + 1 , vector<int>( n + 1 , -1));

        //base case
        for( int i = 0 ; i <= n ; i++){
            dp[i][0] = 0;
        }
        for( int j = 0 ; j <= n ; j++){
            dp[0][j] = 0;
        }

        for( int ind1 = 1 ; ind1 <= n ; ind1++){
            for( int ind2 = 1 ; ind2 <= n ; ind2++){
                //if matches
                if( s[ind1 - 1] == t[ind2 - 1]){
                    dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 -1];
                }
                else{
                    dp[ind1][ind2] = max( dp[ind1 -1][ind2] , dp[ind1][ind2 -1]);
                }
            }
        }
        return n - dp[n][n];
    }
};
