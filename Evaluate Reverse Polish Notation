// TC = O(n) and space complexity O(n)
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        // what we can do here is push the tokens in a stack then if we get an operator then we will take the top two elements
        // from the stack the 1st will be the 2nd operand and the 2nd will be the 1st operand suppose i encounter the +
        // then a = 2top element and b will first top therefore a + b will be evaluated and then it will be pushed into the stack
        int n = tokens.size();
        stack<int> s;
        for(int i = 0 ; i < n ; i++){
            if(tokens[i] == "+" || tokens[i] == "-" || tokens[i] == "*" || tokens[i] == "/"){
                int b = s.top();
                s.pop();
                int a = s.top();
                s.pop();
                // now we will perform the operation according to what is the operator
                if(tokens[i] == "+"){
                    s.push(a + b);
                }
                else if(tokens[i] == "-"){
                    s.push(a - b);
                }
                else if(tokens[i] == "*"){
                    s.push(a * b);
                }
                else{
                    s.push(a / b);
                }
            }
            else{
                int nu = stoi(tokens[i]);
                s.push(nu);
            }
        }
        return s.top();
    }
};
