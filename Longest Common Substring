int lcs(string &str1, string &str2){
    int n1 = str1.size();
    int n2 = str2.size();
    vector<vector<int>> dp( n1 + 1 , vector<int>( n2 + 1 , -1));

    //we are still using -1 indexing thats why we have increased the indexing size
    //base case
    for( int i = 0 ; i <= n1; i++){
        dp[i][0] = 0;
    }
    for( int j = 0 ; j < n2 ; j++){
        dp[0][j] = 0;
    }
    //here it is same as longest common subsequence
    //but a slight change as when it will not match we will simply make it zero
    //when it matches then we will chekc if the previous guy has what vlaue and we will add it to the current vlaue
    //also while filling the table we will check for the maxm value as that will be the answer
    int ans = 0 ;
    for( int ind1 = 1 ; ind1 <= n1 ; ind1++){
        for( int ind2 = 1 ; ind2 <= n2 ; ind2++){
            if( str1[ind1 - 1] == str2[ind2 - 1]){
                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
                ans = max( ans , dp[ind1][ind2]);
            }
            else 
                dp[ind1][ind2] = 0;
        }
    }
    return ans;

}
