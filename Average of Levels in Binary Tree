/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> ans;
        if( root == nullptr) return ans;
        vector<vector<int>> result;
        queue<TreeNode*> q;
        q.push(root);
        while( !q.empty()){
            int size = q.size();
            vector<int> level;
            for( int i = 0 ; i < size ; i++){
                TreeNode* node = q.front();
                q.pop();
                if( node -> left != nullptr) q.push( node -> left);
                if( node -> right != nullptr) q.push( node -> right);
                level.push_back(node -> val);
            }
            result.push_back(level);
        }

        //now we will find the sum of each row in the result 2d matrix
        for( int i = 0 ; i < result.size() ; i++){
            double sum = 0;
            double count = 0;
            for( int j = 0 ; j < result[i].size() ; j++){
                sum += result[i][j];
                count++;
            }
            sum = sum / count;
            ans.push_back(sum);
        }
        return ans;
    }
};
