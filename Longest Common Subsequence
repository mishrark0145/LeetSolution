//Recursion(TLE)

// TC = O(2^(m + n)) and space is O(m + n)
class Solution {
public:
    int commonSub(string text1, string text2, int ptr1, int ptr2){
        if(ptr1 < 0 || ptr2 < 0){
            return 0;
        }
        // if the character matches for text1 and text2
        if(text1[ptr1] == text2[ptr2]){
            return 1 + commonSub(text1, text2, ptr1 - 1, ptr2 - 1);
        }
        // now we can increase any of the pointer
        return max(commonSub(text1, text2, ptr1 - 1, ptr2), commonSub(text1, text2, ptr1, ptr2 - 1));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        return commonSub(text1, text2, m - 1, n - 1);
    }
};

//Memoization

// TC = O(m * n) and space is O(m * n) plus the auxilary stack space O(m + n)
class Solution {
public:
    int commonSub(string& text1, string& text2, int ptr1, int ptr2, vector<vector<int>>& dp){
        if(ptr1 < 0 || ptr2 < 0){
            return 0;
        }
        if(dp[ptr1][ptr2] != -1) return dp[ptr1][ptr2];
        // if the character matches for text1 and text2
        int len = 0;
        if(text1[ptr1] == text2[ptr2]){
            return dp[ptr1][ptr2] = 1 + commonSub(text1, text2, ptr1 - 1, ptr2 - 1, dp);
        }
        // now we can increase any of the pointer
        return dp[ptr1][ptr2] = max(commonSub(text1, text2, ptr1 - 1, ptr2, dp), commonSub(text1, text2, ptr1, ptr2 - 1, dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return commonSub(text1, text2, m - 1, n - 1, dp);
    }
};

//Tabulation

// TC = O(m * n) and space is O(m * n) 
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));
        // we will have to store the negative index to 0 so we have to do the shifting by 1 
        // base case
        // we have to make the zero of 1st row and 1st col
        for(int i = 0; i <= m ; i++){
            dp[i][0] = 0;
        }
        for(int i = 0; i <= n ; i++){
            dp[0][i] = 0;
        }

        for(int ptr1 = 1; ptr1 <= m ; ptr1++){
            for(int ptr2 = 1 ; ptr2 <= n ; ptr2++){
                // zero based indexing for string
                if(text1[ptr1 - 1] == text2[ptr2 - 1]){
                    dp[ptr1][ptr2] = 1 + dp[ptr1 - 1][ptr2 - 1];
                }
                // now we can increase any of the pointer
                else
                    dp[ptr1][ptr2] = max(dp[ptr1 - 1][ptr2], dp[ptr1][ptr2 - 1]);
            }
        }
        return dp[m][n];
    }
};
