//Recursion(TLE)

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();
        return rec( n1 - 1 , n2 - 1 , text1 , text2);
    }

    int rec( int ind1 , int ind2 , string text1 , string text2){
        if( ind1 < 0 || ind2 < 0){
            return 0;
        }
        if( text1[ind1] == text2[ind2]){
            return 1 + rec( ind1 - 1 , ind2 - 1 , text1 , text2);
        }
        return max( rec( ind1 - 1 , ind2 , text1 , text2) , rec( ind1 , ind2 - 1 , text1 , text2));
    }
};

//Memoization

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();
        vector<vector<int>> dp( n1 , vector<int>( n2 , -1));
        return rec( n1 - 1 , n2 - 1 , text1 , text2 , dp);
    }

    int rec( int ind1 , int ind2 , string& text1 , string& text2 , vector<vector<int>>& dp){
        if( ind1 < 0 || ind2 < 0){
            return 0;
        }
        if( dp[ind1][ind2] != -1) return dp[ind1][ind2];
        if( text1[ind1] == text2[ind2]){
            return dp[ind1][ind2] = 1 + rec( ind1 - 1 , ind2 - 1 , text1 , text2 , dp);
        }
        return dp[ind1][ind2] = max( rec( ind1 - 1 , ind2 , text1 , text2 , dp) , rec( ind1 , ind2 - 1 , text1 , text2 , dp));
    }
};

//Tabulation

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();
        vector<vector<int>> dp( n1 + 1 , vector<int>( n2 + 1 , -1));
        //we will shift the index so that it will work for the -1 index
        for(int i = 0 ; i <= n1; i++){
            dp[i][0] = 0;
        }
        for(int j = 0 ; j <= n2; j++){
            dp[0][j] = 0;
        }
        for( int ind1 = 1 ; ind1 <= n1 ; ind1++){
            for( int ind2 = 1 ; ind2 <= n2 ; ind2++){
                if( text1[ind1 - 1] == text2[ind2 - 1]){
                    dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 -1];
                }
                else{
                    dp[ind1][ind2] = max( dp[ind1 -1][ind2] , dp[ind1][ind2 -1]);
                }
            }
        }
        return dp[n1][n2];
    }
};
