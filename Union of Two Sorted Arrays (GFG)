// TC = O(n + m)
class Solution{
    public:
    //arr1,arr2 : the arrays
    // n, m: size of arrays
    //Function to return a list containing the union of the two arrays. 
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        // now we will solve this by two pointer approach and here we are taking the union so we have to check if the element that
        // we are taking, it should not be in the ans array if it is there the we will simply move the index
        vector<int> unionArr;
        int ind1 = 0;
        int ind2 = 0;
        while(ind1 < n && ind2 < m){
            if(arr1[ind1] <= arr2[ind2]){
                // now we have to check before pushing the element
                // if the union is empty simply push but if it is not then check with the last pushed element
                if(unionArr.empty() || unionArr.back() != arr1[ind1]){
                    unionArr.push_back(arr1[ind1]);
                }
                // we have to always increase the ind1
                ind1++;
            }
            else{
                if(unionArr.empty() || unionArr.back() != arr2[ind2]){
                    unionArr.push_back(arr2[ind2]);
                }
                ind2++;
            }
        }
        while(ind1 < n){
            if(unionArr.empty() || unionArr.back() != arr1[ind1]){
                unionArr.push_back(arr1[ind1]);
            }
            // increase the ind1
            ind1++;
        }
        while(ind2 < m){
            if(unionArr.empty() || unionArr.back() != arr2[ind2]){
                unionArr.push_back(arr2[ind2]);
            }
            ind2++;
        }
        return unionArr;
    }
};
