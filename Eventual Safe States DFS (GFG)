//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
    private:
    bool dfs( int start , vector<int>& visited , vector<int>& path , vector<int> adj[] , vector<int>& check){
        visited[start] = 1;
        path[start] = 1;

        //visiting the neighbours
        for( auto node : adj[start]){
            if( visited[node] == 0){
                if(dfs( node , visited , path , adj , check)){
                    return true;
                }
            }
            else if( path[node] == 1){
                return true;
            }
        }
        //if we didnt fine the cycle
        check[start] = 1;
        path[start] = 0;
        return false;
    }
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        //here we will be using the concept of cycle detection in directed graph
        // the answer would not contian any node who is a part of a cycle cannot be a safe node
        // also any one leads to a cycle cannot be a safe node

        vector<int> visited(V, 0); // Keeps track of visited nodes
        vector<int> path(V, 0); // Keeps track of the current path
        vector<int> check(V, 0); // Keeps track of safe nodes

        for( int i = 0 ; i < V ; i++){
            if( !visited[i]){
                dfs(i , visited , path , adj , check);
            }
        }
        vector<int> ans;
        for( int i = 0 ; i < V ; i++){
            if(check[i] == 1){
                ans.push_back(i);
            }
        }
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {

        int V, E;
        cin >> V >> E;
        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        vector<int> safeNodes = obj.eventualSafeNodes(V, adj);
        for (auto i : safeNodes) {
            cout << i << " ";
        }
        cout << endl;
    }
}

// } Driver Code Ends
