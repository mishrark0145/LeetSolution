// Optimal Solution
// TC = O(N*M) with constant space O(1)
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        // To do this without using extra space is to use the first row and first column to mark which row and column do we need to make
        // it zero , previously we are marking that using extra space
        // Now to do this just traverse matrix and if we get a zero just mark that first row with the col and first col with that row to 
        // zero (see how did that in the code)
        int n = matrix.size();
        int m = matrix[0].size();
        // Now to not get lost the data we will avoid the first row and first col we will do that in the last
        bool firstRowHasZero = false;
        bool firstColHasZero = false;
        // if there is zero in the matrix for the first row then we will make the zero flag to one
        for(int col = 0; col < m; col++){
            if(matrix[0][col] == 0){
                firstRowHasZero = true;
                break;
            }
        }
        for(int row = 0; row < n; row++){
            if(matrix[row][0] == 0){
                firstColHasZero = true;
                break;
            }
        }
        for(int row = 0 ; row < n ; row++){
            for(int col = 0 ; col < m ; col++){
                if(matrix[row][col] == 0){
                    // make the first row that col to zero
                    matrix[0][col] = 0;
                    // make the first col that row to zero
                    matrix[row][0] = 0;
                }
            }
        }
        // now we have the marked col and rows we wanted in the matrix itsefl
        
        // first row traversed to make the columns to zero
        for(int col = 1; col < m; col++){
            if(matrix[0][col] == 0){
                for(int row = 0; row < n; row++){
                    matrix[row][col] = 0;
                }
            }
        }
        // similarly for the first column to make all the rows to zero
        for(int row = 1; row < n; row++){
            if(matrix[row][0] == 0){
                for(int col = 0; col < m; col++){
                    matrix[row][col] = 0;
                }
            }
        }
        // now to make the first row and col to zero check the rowFlag and colFlag
        // first row to zero
        if(firstRowHasZero){
            for(int col = 0; col < m; col++){
                matrix[0][col] = 0;
            }
        }
        // first col to zero    
        if(firstColHasZero){
            for(int row = 0; row < n; row++){
                matrix[row][0] = 0;
            }
        }
    }
};

// Better Solution
// TC = O(3*N*M) in worst case also considering insert will take O(1)
// we can take any list or array but that will also run for duplicates
// so i used unordered_set
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        // we will just store the indexes {i , j} in vector pair which will represent zeroes then we have to simply just make sure to take
        // that i th row and jth column to zero or what else we can do is just store the i in a set vector and j in set vector
        // so that we could simply run throug the row set to make it zero than the column set to make it zero
        int n = matrix.size();
        int m = matrix[0].size();
        unordered_set<int> colSet;
        unordered_set<int> rowSet;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(matrix[i][j] == 0){
                    rowSet.insert(i);
                    colSet.insert(j);
                }
            }
        }
        // just go through the rows
        for(auto row : rowSet){
            // go through all the columns for that row 
            for(int j = 0 ; j < m ; j++){
                matrix[row][j] = 0;
            }
        }
        // go through the col
        for(auto col : colSet){
            for(int i = 0 ; i < n ; i++){
                matrix[i][col] = 0;
            }
        } 
    }
};
