// TC = O(M*N)
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        vector<int> ans;
        int top = 0;
        int bottom = row - 1;
        int left = 0;
        int right = col - 1;
        // so here what we have to do is move from left to right then top to bottom then right to left then bottom to top
        // i.e. four corner of the matrix now we have to repeat this process again for like when top <= bottom and left <= right
        while(top <= bottom && left <= right){
            // first traversing the top i.e left to right keeping top constant
            for(int i = left ; i <= right ; i++){
                ans.push_back(matrix[top][i]);
            }
            // after this top should be top++
            top++;
            // now move the right side col keeping the right index common top to bottom
            for(int i = top ; i <= bottom ; i++){
                ans.push_back(matrix[i][right]);
            }
            // now do the right--
            right--;
            // now here we have to check if the top <= bottom bcz here we have done above a top++
            if(top <= bottom){
                // now traverse the bottom from right to left keeping bottom constant
                for(int i = right ; i >= left ; i--){
                    ans.push_back(matrix[bottom][i]);
                }
            }    
            // now make the bottom--;
            bottom--;
            // now here we have to check if the left <= right bcz we have done a right--
            if(left <= right){
                // now traverse the left side from bottom to top keeping the left constant
                for(int i = bottom ; i >= top ; i--){
                    ans.push_back(matrix[i][left]);
                }
            }    
            // make left++
            left++;
        }
        return ans; 
    }
};
