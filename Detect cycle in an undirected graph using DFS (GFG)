//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
    bool dfs( int source ,int parent , vector<int>& visited , vector<int> adj[]){
        // marking the source as visited
        visited[source] = 1;
        // now we will traverse the neighbours
        for( auto it : adj[source]){
            if( visited[it] == 0){
                // it the dfs call gets true then it will always gives true
                if(dfs( it , source , visited , adj)){
                    return true;
                }
            }  
            // if the current nodes is not equal to the parent and it is visited then 
            // it is bcz we have a cycle
            else if( it != parent )
                return true;
        }
        // if after every visiting neighbours we get nothing then return false
        return false;
    }
  
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> visited( V , 0);
        
        for( int i = 0 ; i < V ; i++){
            if( visited[i]== 0){
                // here we are passing the parent as -1 
                // connected components concept
                if( dfs(i , -1 , visited , adj)) return true;
            }
        }
        return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
