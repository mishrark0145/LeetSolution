//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
    void bfs(int row , int col , vector<vector<char>>& grid , vector<vector<int>>& visited){
        queue<pair<int,int>> q;
        q.push({row , col});
        //mark this row and col in the visited array
        visited[row][col] = 1;
        
        int n = grid.size();
        int m = grid[0].size();
        while( !q.empty()){
            pair<int,int> node = q.front();
            q.pop();
            //now visiting all the neighbours of the popped node that is stored in the node pair<int,int>
            for( int delrow = -1 ; delrow <=1 ; delrow++){
                for( int delcol = -1 ; delcol <=1 ; delcol++){
                    if( delcol == 0 && delrow == 0)
                        continue;
                    int nrow = node.first + delrow;
                    int ncol = node.second + delcol;
                    if( nrow < n && nrow >= 0 && ncol < m && ncol >=0 && grid[nrow][ncol] == '1' && visited[nrow][ncol] == 0){
                        visited[nrow][ncol] = 1;
                        q.push({nrow , ncol});
                    }
                    
                }
            }
        }
    }
  
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        //making a visted 2d array bcz we are gonna consider each cell as nodes of a graph 
        // and we will represent each node by pair of integer
        int n = grid.size();//rows
        int m = grid[0].size();//column
        vector<vector<int>> visited( n , vector<int>( m , 0));
        int noisland = 0;
        //starting from the top left corner
        for( int row = 0 ; row < n ; row++){
            for( int col = 0 ; col < m ; col++){
                if( visited[row][col] == 0 && grid[row][col] == '1') {
                    noisland++;
                    //we will do the bfs traversal
                    bfs( row , col , grid , visited);
                }
            }
        }
        return noisland;
    }
};

//Time Complexity = N*M*9

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
