/*
    Floyd's cycle detection algorithm, also known as the "tortoise and hare" algorithm, is a widely used and efficient method for detecting cycles in a linked list. It guarantees to find a cycle if one exists and has a time complexity of O(N), where N is the number of nodes in the linked list. The best part is that it uses only two pointers to achieve this, making it very memory-efficient.

    Here's a brief overview of how the Floyd's cycle detection algorithm works:

    Initialize two pointers, often referred to as the slow pointer and the fast pointer, both starting from the head of the linked list.

    Move the slow pointer one step at a time (i.e., slow = slow->next).

    Move the fast pointer two steps at a time (i.e., fast = fast->next->next).

    If the linked list has a cycle, the fast pointer will eventually catch up to the slow pointer, and they will meet at some node inside the cycle.

    If the linked list does not have a cycle, the fast pointer will reach the end of the list, and the loop will terminate.    
*/
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if( head == nullptr) return false;
        ListNode* slow = head , *fast = head;
        while(fast != nullptr && fast -> next != nullptr){
            slow = slow -> next;
            fast = fast -> next -> next;
            if( fast == slow) return true;
        }
        return false;
    }
};
