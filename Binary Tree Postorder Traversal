//recursive approach

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if( root == nullptr) return ans;
        rec( root , ans);
        return ans;
    }

    void rec( TreeNode* root , vector<int>& ans){
        if(root == nullptr) return;
        //go left
        rec( root -> left , ans);
        //go right
        rec( root -> right , ans);
        //push the value of the node
        ans.push_back( root -> val); 
    }
};

//iterative approach( using 2 stack )

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if( root == nullptr) return ans;
        stack<TreeNode*> s1;
        stack<TreeNode*> s2;
        s1.push(root);
        while(!s1.empty()){
            TreeNode* node = s1.top();
            s1.pop();
            s2.push(node);
            if( node -> left != nullptr) s1.push( node -> left);
            if( node -> right != nullptr) s1.push( node -> right);
        }
        while( !s2.empty()){
            TreeNode* temp = s2.top();
            s2.pop();
            ans.push_back(temp -> val);
        }
        return ans;
    }
};

//iterative approach ( uisng 1 stack )
/*
        Algorithm
        1. go left till nullptr
        2. if curr == nullptr then go right
        3. if right is null then pop the element and push that in the answer 
           and if that pop element is equal to top right then we will again pop it
           else curr = temp 
*/
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        if( root == nullptr) return ans;
        stack<TreeNode*> s;
        //we have defined a curr to traverse the tree and store the nodes in the stack
        TreeNode* curr = root;
        while( curr != nullptr || !s.empty()){
            //if curr is not null then we will move left and push the curr in the stack
            if( curr != nullptr){
                s.push(curr);
                curr = curr -> left;
            }
            //if it is null
            else{
                //move to the right of the top element
                TreeNode* temp = s.top() -> right;
                //now if the right of the top element is also null then we will pop the top and store in the ans 
                if( temp == nullptr){
                    temp = s.top();
                    s.pop();
                    ans.push_back( temp -> val);
                    //now we will backtrack and will now look if the stack top right is equal to the previous top 
                    //if it is then we will do the same thing as above staed till the top right is not equal to the previous top of the stack
                    while( !s.empty() && temp == s.top() -> right){
                        temp = s.top();
                        s.pop();
                        ans.push_back(temp -> val);
                    }
                }
                //if right is not null then we will asign to the curr and then while loop will run again
                else{
                    curr = temp;
                }  
            }
        }
        return ans;
    }
};

