// TC = O(sqrt(n))
class Solution{
public:
    int isPrime(int n){
        // A prime number can be represent as 6*n + 1  or 6*n - 1 except for 2 and 3
        // so we will use this thing to find if the number is prime or not
        if(n <= 1) return 0;
        if(n == 2 || n == 3) return 1;
        // if n is divisible by now 2 or 3 then it will not be a prime no
        if(n % 2 == 0 || n % 3 == 0) return 0;
        // now we will check from 5 to square root of n and we will increase by +6
        for(int i = 5 ; i <= sqrt(n) ; i = i + 6){
            if(n % i == 0 || n % (i + 2) == 0){
                return 0;
            }
        }
        // if nothing happens simply return 1
        return 1;
    }
};
