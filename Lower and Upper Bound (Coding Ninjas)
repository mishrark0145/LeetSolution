int lowerBound(vector<int> arr, int n, int x) {
	// lower bound is arr[i] >= x smallest index 
	int ans = n;
	int low = 0;
	int high = n - 1;
	while(low <= high){
		int mid = (low + high) / 2;
		// maybe the answer
		if(arr[mid] >= x){
			ans = mid;
			// look for small index on left
			high = mid - 1;
		} 
		else{
			// look for right
			low = mid + 1;
		}
	}
	return ans;
}


int upperBound(vector<int> &arr, int x, int n){
	// the upper bound is first value which is greater than x we have to return the index
	int ans = n;
	int low = 0;
	int high = n - 1;
	while(low <= high){
		int mid = (low + high) / 2;
		if(arr[mid] > x){
			ans = mid;
			high = mid - 1;
		}
		else{
			low = mid + 1;
		}
	}
	return ans;
}
