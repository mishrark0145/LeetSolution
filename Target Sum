//Basic Solution

class Solution {
public:
    int sum = 0 ;
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        return rec( n - 1 , target , nums );
    }

    int rec( int ind , int target , vector<int>& nums){
        if( ind == -1){
            return target == 0;
        }
        int plus = rec( ind - 1 , target + nums[ind] , nums );
        int minus = rec( ind - 1 , target - nums[ind] , nums );
        return plus + minus;
    }
};

//Solution Based on subset difference equal to target which is given

//Memoization

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int totsum = 0 ;
        for( int i = 0 ; i < n ; i++){
            totsum += nums[i];
        }
        if( (target + totsum) % 2 != 0) return 0;
        target = (target + totsum)/2;
        return rec( n - 1 , target , nums );
    }

    int rec( int ind , int target , vector<int>& nums){
        if( ind == 0){
            int take = target == nums[0];
            int not_take = target == 0;
            return take + not_take;
        }
        int not_take = rec( ind - 1 , target , nums);
        int take = 0;
        if( nums[ind] <= target)
            take = rec( ind - 1 , target - nums[ind] , nums);
        return take + not_take;    
    }
};

//Tabulation

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int totsum = 0 ;
        for( int i = 0 ; i < n ; i++){
            totsum += nums[i];
        }
        if( (target + totsum) % 2 != 0 || (target + totsum) < 0) return 0;
        target = (target + totsum)/2;

        vector<vector<int>> dp( n , vector<int>( target + 1 , 0));

        if( nums[0] == 0) dp[0][0] = 2;
        else dp[0][0] = 1;

        if( nums[0] != 0 && nums[0] <= target) dp[0][nums[0]] = 1;

        for( int ind = 1 ; ind < n ; ind++){
            for( int t = 0 ; t <= target ; t++){
                int not_take = dp[ind -1][t];
                int take = 0;
                if( nums[ind] <= t)
                    take = dp[ind -1][t - nums[ind]];
                dp[ind][t] = take + not_take;    
            }
        }
        return dp[n - 1][target];
    }
};
