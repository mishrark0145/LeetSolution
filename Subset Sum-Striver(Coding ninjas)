void Subsets(vector<int>& num , int n , vector<vector<int>>& subset){
        if( n < 0) return subset.push_back({});
        Subsets(num,n-1,subset);
        int size = subset.size();
        for( int i = 0 ; i < size ; i++){
            vector<int> temp;
            int temp_size = subset[i].size();
            for(int j = 0 ; j < temp_size ; j++){
                temp.push_back(subset[i][j]);
            }
            temp.push_back(num[n]);
            subset.push_back(temp);
        }
       
    }


vector<int> subsetSum(vector<int> &num){
		
        int n=num.size();
        vector<vector<int>> subset;
        Subsets(num,n-1,subset);
        vector<int> sum;
		for(int i = 0 ; i < subset.size() ; i++){
			int temp=0;
			for(int j = 0 ; j < subset[i].size() ; j++ ){
				temp = temp + subset[i][j];
			}
			sum.push_back(temp);
		}
		sort(sum.begin(),sum.end());
        return sum;
    }


//2nd solution


void subset( vector<vector<int>>& subsets , vector<int>& temp , int ind , vector<int>& num){
    if( ind == num.size()){
        subsets.push_back(temp);
        return;
    }
    //picking the element for subset
    temp.push_back(num[ind]);
    subset( subsets , temp , ind + 1 , num);
    temp.pop_back();
    //not picking the element
    subset( subsets , temp , ind + 1 , num);
}

vector<int> subsetSum(vector<int> &num){
	vector<vector<int>> subsets;
    vector<int> temp;
    subset( subsets , temp , 0 , num);
    vector<int> ans;
    for( int i = 0 ; i < subsets.size() ; i++){
        int sum = 0;
        for( int j = 0 ; j < subsets[i].size() ; j++){
            sum += subsets[i][j];
        }
        ans.push_back(sum);
    }
    sort( ans.begin() , ans.end());
    return ans;	
}

