// Optimal Soution when the array has only positive integers and Time Complexity = O(2*N)
#include<bits/stdc++.h>
int longestSubarrayWithSumK(vector<int> a, long long k) {
    // We will use the two pointer approach and we will move right and keep the sum increasing now if the sum becomes k just do right - left + 1
    // that will be the length of the subarray now when sum exceeds we will shift the i by one till it becomes less than or equal to zero
    // adding in the sum by increasing the right by one and
    int maxLen = 0;
    int right = 0;
    int left = 0;
    int n = a.size();
    long long sum = a[0];
    while(right < n){
        // if the sum excceds the k then we will subtract a[left] and then move left++
        while(sum > k){
            sum -= a[left];
            left++;
        }
        // if sum == k 
        if(sum == k){
            maxLen = max(maxLen, right - left + 1);
        }
        // now we will add after increasing the right
        right++;
        if(right < n) sum += a[right];
    }
    return maxLen;
}


// This is the optimal solution if the array has negative in it but for positives this is a better solution only not the optimal one
#include<bits/stdc++.h>
int longestSubarrayWithSumK(vector<int> A, long long K) {
    // In this approach, we are using the concept of the prefix sum to solve this problem. Here, the prefix sum of a subarray 
    // ending at index i, simply means the sum of all the elements of that subarray.
    // We will be using the hash maps to find the longest subarray with the sum equal to K
    // Now we will use maths here now suppose till index j starting from 0 we have sum equal to s
    // now we know our target is K so to get a subarray with sum K including this element at index j 
    // some subarray starting of the previous elements must have sum equal to s - K
    // So what we will be doing we will store every sum as key to its index while traversing the array 
    // and at each index we will check for the prefix sum that if(hasmap.find(s - K) != hashmap.end()) if we find that
    // the the length would be j - hashmap.second and if we got a sum from the staring equal to K we will check for its lenght
    map<long long,int> mp;
    int N = A.size();
    int maxLen = 0;
    long long sum = 0;
    for(int i = 0 ; i < N ; i++){
        sum += A[i];
        if(sum == K){
            maxLen = max(maxLen, i + 1);
        }
        long long remaining = sum - K;
        // we will check is there any one in the map previously has this as there sum
        if(mp.find(remaining) != mp.end()){
            // we got the remaining
            // lenght will be difference of indexes
            maxLen = max(maxLen, i - mp[remaining]);
        }
        // update the map if the sum is not in the map
        // We are checking the map before insertion because we want the index to be as 
        // minimum as possible and so we will consider the earliest index where the sum x-k has occurred.
        // edge case check in the solution to get more understanding
        if(mp.find(sum) == mp.end()){
            mp[sum] = i;
        }
    }
    return maxLen;
}
