// TC = O(2*LogN) 
class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int firstOccurrence(int nums[], int n, int target){
        int low = 0;
        int high = n - 1;
        int ans = -1;
        while(low <= high){
            int mid = (low + high) / 2;
            // if nums of mid is target
            if(nums[mid] == target){
                // now we know the first will be on the left so make high = mid - 1
                ans = mid;
                high = mid - 1;
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return ans;
    }

    int lastOccurrence(int nums[], int n, int target){
        int low = 0;
        int high = n - 1;
        int ans = -1;
        while(low <= high){
            int mid = (low + high) / 2;
            // if nums of mid is target
            if(nums[mid] == target){
                // now we know the second will be on the right so make low = mid + 1
                ans = mid;
                low = mid + 1;
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return ans;
    }	
	int count(int arr[], int n, int x) {
	    // To get the number of occurrences of x then we can do this by fidning the first and the last occurence index
	    // then we can return last - first + 1
	    // We can do this by separately writing the binary search for frist and last occurrences 
        int first = firstOccurrence(arr, n, x);
        // if the first occurrence is -1 
        if(first == -1) return 0;
        int last = lastOccurrence(arr, n, x);
        return last - first + 1;
	}
};
