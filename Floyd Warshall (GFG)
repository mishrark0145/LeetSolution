//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution {
  public:
	void shortest_distance(vector<vector<int>>&cost){
	    //floyd warshall is multisource shortest path algo
	    //here we get the minm distance between any two vertex
	    
	    //in floyd warshall algo we do this via going through every vertex
	    //and then finding the new adjacency matrix from the previous one
	    
	    // suppose the via vertex is 'via'
	    // we are going from i to j
	    // then   cost[i][j] = min( cost[i][j] , cost[i][via] + cost[via][j])
	    
	    //as in the matrix if there is no edge then we are representing it by -1
	    // we will change that to represent it by 1e9
	    int n = cost.size();
	    for( int i = 0 ; i < n ; i++){
	        for( int j = 0 ; j < n ; j++){
	            if( cost[i][j] == -1){
	                cost[i][j] = 1e9;
	            }
	        }
	    }
	    
	    for( int via = 0 ; via < n ; via++){
	        for( int i = 0 ; i < n ; i++){
	            for( int j = 0 ; j < n ; j++){
	                cost[i][j] = min(cost[i][j] , cost[i][via] + cost[via][j]);
	            }
	        }
	    }
	    
	    //now if the costing of a node to itself is anything less than 0 then it has a -ve cycle
	    //they have not stated in the question anything about negative cycle so we will ignore this
	    for( int i = 0 ; i < n ; i++){
	        if( cost[i][i] < 0){
	            return; 
	        }
	    }
	    
	    //now we will change every cell which has value greater than or equal to 1e9 to -1
	    for( int i = 0 ; i < n ; i++){
	        for( int j = 0 ; j < n ; j++){
	            if( cost[i][j] >= 1e9){
	                cost[i][j] = -1;
	            }
	        }
	    }
	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>matrix(n, vector<int>(n, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				cin >> matrix[i][j];
			}
		}
		Solution obj;
		obj.shortest_distance(matrix);
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				cout << matrix[i][j] << " ";
			}
			cout << "\n";
		}
	}
	return 0;
}
// } Driver Code Ends
