// TC = O(2*N*LogN) and space is O(N) and we are distorting the array also
class Solution {
public:
    int merge(vector<int>& nums, int start, int mid, int end){
        int left = start;
        int right = mid + 1;
        // first we will do the checking part of the two sides before mergeing them bcz here the condition is nums[i] > 2*nums[j]
        // so we will do the first checking and storing the reverse pairs then do the merging
        // to find the reverse pairs we will check for the first left element with moving right now we will stop when we didnot get the
        // the reverse pair otherwise we will move it now if we find then we will move the right pointer but if not then only move
        // the left pointer 
        // Now to find this we have to check every left side number to the right one now the right pointer will only go from right to
        // end
        int count = 0;
        // left to mid
        // O(N)
        for(int i = left ; i <= mid ; i++){
            // now check for the condtion for reverse pairs and the right <= end
            while(right <= end && nums[i] > (long long)2*nums[right]){
                // do always right++
                right++;
            }
            // when comes out of the while loop now we will add the reverse pair count
            // till right index - 1 we have all the numbers as reverse pairs with the left one so this what we are counting here 
            count += (right - (mid + 1));
        }
        vector<int> temp;
        // change the left and right pointer
        left = start ; right = mid + 1;
        // O(N)
        while(left <= mid && right <= end){
            if(nums[left] <= nums[right]){
                temp.push_back(nums[left]);
                left++;
            }
            else{
                temp.push_back(nums[right]);
                right++;
            }
        }
        while(left <= mid){
            temp.push_back(nums[left]);
            left++;
        }
        while(right <= end){
            temp.push_back(nums[right]);
            right++;
        }
        for(int i = start ; i <= end ; i++){
            nums[i] = temp[i - start];
        }
        return count;
    }

    int mergeSort(vector<int>& nums, int start, int end){
        int cnt = 0;
        if(start >= end) return cnt;
        int mid = (start + end) / 2;
        int left = start;
        int right = mid + 1;
        // Left side
        cnt += mergeSort(nums, start, mid);
        // Right Side
        cnt += mergeSort(nums, mid + 1, end);
        // Merge them
        cnt += merge(nums, start, mid, end);
        return cnt;
    }
    
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        return mergeSort(nums, 0, n - 1);
    }
};
