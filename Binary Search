// Recusive solution TC = O(LogN)
class Solution {
public:
    int findIndex(vector<int>& nums, int left, int right, int target){
        if(left > right) return -1;
        int index = -1;
        int mid = (left + right) / 2;
        if(nums[mid] == target){
            return mid;
        }
        else if(nums[mid] < target){
            return findIndex(nums, mid + 1, right, target);
        }
        else{
            return findIndex(nums, left, mid - 1, target);
        }
    }
    int search(vector<int>& nums, int target) {
        int index = -1;
        return findIndex(nums, 0, nums.size() - 1, target);
    }
};

// Iterative Solution
// TC = O(N)
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int low = 0;
        int high = n - 1;
        int mid;
        while(low <= high){
            mid = (low + high) / 2;
            if(nums[mid] == target) return mid;
            else if(nums[mid] > target){
                high = mid - 1;
            } 
            else{
                low = mid + 1;
            }
        }
        return -1;
    }
};
