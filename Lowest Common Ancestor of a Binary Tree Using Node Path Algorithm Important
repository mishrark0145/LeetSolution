class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // Basic approcan can be go to both the node store the path in two arrys then compare both of them, the last common elements will
        // be the lowest common ancestor

         vector<TreeNode*> parray;
         int pval = p->val;
         nodepath(root, pval, parray);
         vector<TreeNode*> qarray;
         int qval = q->val;
         nodepath(root, qval, qarray);
         // Now we will compare 
         TreeNode* ans;
         int len = min(parray.size(), qarray.size());
         cout<<len<<endl;
         for(int i = 0 ; i < len ; i++){
            if(parray[i]->val == qarray[i]->val){
                ans = parray[i];
            }
         }
         return ans;
    }

    bool nodepath(TreeNode* node, int value, vector<TreeNode*>& array){
        // root to node path function
        // First if the node is nullptr then return false
        if(!node) return false;
        // Now push the node->val in the parray
        array.push_back(node);
        // If the node->val is equal to the pval return true
        if(node->val == value) return true;
        // Now we will go left and right if we get anyone of them to be true we will return true as we have go our path no need to find anymore
        if(nodepath(node->left, value, array) || nodepath(node->right, value, array)){
            return true;
        }
        // Now if we did not get the path here that means we have to go back but before that we have to pop the parray that we have pushed previously
        array.pop_back();
        // Then we will return false as we did not get any path
        return false;
    }
};
