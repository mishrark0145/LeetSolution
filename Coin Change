//Memoization

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if( amount == 0) return 0;
        int n = coins.size();
        vector<vector<int>> dp( n , vector<int>( amount + 1 , -1));
        int result = rec( n - 1 , amount , coins , dp );
        if( result >= 1e9) return -1;
        else return result;
    }

    int rec( int ind , int amount , vector<int>& coins , vector<vector<int>>& dp ){
        if( amount == 0) return 0;
        if(ind == 0){
            if( amount%coins[0] == 0) return amount/coins[0];
            else return 1e9;
        }
        if( dp[ind][amount] != -1) return dp[ind][amount];
        int pick = 1e9;
        if( coins[ind] <= amount)
        pick = 1 + rec( ind , amount - coins[ind] , coins , dp );
        int not_pick = 0 + rec( ind - 1 , amount , coins , dp );
        return dp[ind][amount] = min( pick , not_pick);
    }
};

//Tabulation

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if( amount == 0) return 0;
        int n = coins.size();
        vector<vector<int>> dp( n , vector<int>( amount + 1 , -1));
        for( int t = 0 ; t <= amount ; t++){
            if( t % coins[0] == 0){
                dp[0][t] = t / coins[0];
            }
            else dp[0][t] = 1e9;
        }
        for( int i = 1 ; i < n ; i++){
            for( int j = 0 ; j <= amount ; j++){
                int not_pick = 0 + dp[i - 1][j];
                int pick = 1e9;
                if( coins[i] <= j)
                pick = 1 + dp[ i ][j - coins[i]];
                dp[i][j] = min( pick , not_pick);
            }
        }
        if( dp[n - 1][amount] >= 1e9) return -1;
        else return dp[n - 1][amount];
    }
};
