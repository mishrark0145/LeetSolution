// Brute Solution
// TC = O(N) and space is O(n) 
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        // Now for right view we can use the level order traversal as it is right view we just have to take the value which comes last
        // in a level order suppose we are on level 0 then if we are at the last element of that level we have to store that value in the array
        // like if in the queue we have two elements then size is 2 that means index wise 1 i.e. 0 and 1 so when we are at 1 that means that element
        // would get in the array
        if(root == nullptr) return {};
        vector<int> rtview;

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int size = q.size();
            for(int i = 0 ; i < size ; i++){
                auto node = q.front();
                q.pop();
                // last element on that level that is on the right most size
                if( i == size - 1){
                    rtview.push_back(node->val);
                }
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
        }
        return rtview;
    }
};

// Optimal soulution
// TC = O(n) and auxilary space O(H)
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        if(root == nullptr) return res;
        recursionRight(root, 0, res);
        return res;
    }

    // Recursive function to traverse the binary tree and populate the right-side view
    void recursionRight(TreeNode* root, int level, vector<int> &res){
        if(root == nullptr){  // Base case: if the current node is null, return
            return;
        }

        // If we are visiting this level for the first time, add the node's value
        if(res.size() == level){
            res.push_back(root->val);
        }

        // Traverse the right subtree first to ensure rightmost nodes are prioritized
        recursionRight(root->right, level + 1, res);
        
        // Then traverse the left subtree
        recursionRight(root->left, level + 1, res);
    }
    
};
