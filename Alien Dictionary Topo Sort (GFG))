//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
    public:
    string findOrder(string dict[], int N, int K) {
        // it is like finding the order
        // here if the words in the dictionary are treated in pairs from top to bottom
        // and if we get an unequal character matching then the above character must lie berfore the down one
        
        // so we will do this and we will make a graph out of this
        // like a = 0 , b = 1 and so on z = 25
        // now suppose 1st string is bba and the second is aab and if we compare that the 1st char of the 1st string
        // is not equal to the 1st char of the second stirng therefore we can say b < a or  b -> a
        // and as b = 1 and a = 0  ---- 1 -> 0
        // so doing that we will be able to make a directed graph
        // now out task is to find the order of characters 
        
        // so now first change this question into graphs
        vector<int> adj[K];
        for( int i = 0 ; i < N - 1 ; i++){
            string s1 = dict[i];
            string s2 = dict[i + 1];
            //now we have to compare it
            int len = min(s1.size() , s2.size());
            for( int ptr = 0 ; ptr < len ; ptr++){
                if( s1[ptr] != s2[ptr]){
                    adj[s1[ptr] - 'a'].push_back(s2[ptr] - 'a');//we have minus the 'a' bcz we wanted a to be zero
                    break;
                }
            }
        }
        
        // now we will apply the topo sort
        
        vector<int> indegree(K , 0);
        for( int i = 0 ; i < K ; i++){
            for(auto it : adj[i]){
                indegree[it]++;
            }
        }

        queue<int> q;
        for( int i = 0 ; i < K ; i++){
            if( indegree[i] == 0){
                q.push(i);
            }
        }
        
        string alien;
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            alien.push_back(char(node + 'a'));
            
            for(auto ver : adj[node]){
                indegree[ver]--;
                if( indegree[ver] == 0){
                    q.push(ver);
                }
            }
        }
        return alien;
    }
};

//{ Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends
