class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if( n == 1) return nums[0];
        vector<int> dp( n + 1 , -1);
        vector<int> temp1 , temp2;
        for( int i = 0 ; i < n ; i++){
            if( i != 0) temp1.push_back(nums[i]);
            if( i != n - 1) temp2.push_back(nums[i]);
        }
        int not_picked = house( temp1.size() - 1, temp1 , dp);
        fill( dp.begin() , dp.end() , -1);
        int picked = house( temp2.size() - 1 , temp2 , dp);
        return  max( not_picked , picked );
    }

    int house( int indx , vector<int>& nums , vector<int>& dp){
        if( indx == 0) return nums[0];
        if( indx < 0){
            return 0;
        }
        if( dp[indx] != -1) return dp[indx];
        int picked = nums[indx] + house( indx - 2 , nums , dp);
        int not_picked = 0 + house( indx - 1 , nums , dp);
        dp[indx] = max( picked , not_picked);
        return dp[indx];
    }
};
