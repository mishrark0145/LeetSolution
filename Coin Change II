//Memoization

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp( n , vector<int>( amount + 1 , -1));
        return rec( n - 1 , amount , coins , dp);
    }

    int rec( int ind , int amount , vector<int>& coins , vector<vector<int>>& dp){
        if( ind == 0){
            if( amount%coins[0] == 0) return 1;
            else return 0;
        }
        if( dp[ind][amount] != -1) return dp[ind][amount];
        int not_pick = rec( ind - 1 , amount , coins , dp);
        int pick = 0;
        if( coins[ind] <= amount)
            pick = rec( ind , amount - coins[ind] , coins , dp);
        return dp[ind][amount] = not_pick + pick;    
    }
};

//Tabulation

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp( n , vector<int>( amount + 1 , -1));
        for( int t = 0 ; t <= amount ; t++){
            if( t % coins[0] == 0) dp[0][t] = 1;
            else dp[0][t] = 0;
        }
        for( int ind = 1 ; ind < n ; ind++){
            for( int target = 0 ; target <= amount ; target++){
                int not_pick = dp[ ind - 1 ][target]; 
                int pick = 0;
                if( coins[ind] <= target)
                    pick = dp[ind][target - coins[ind]];
                dp[ind][target] = not_pick + pick; 
            }
        }
        return dp[n - 1][amount];
    }
};
