// TC = O(n*x) and space is O(n*x) and auxilary space of O(n)

#include <bits/stdc++.h> 

int minmCoins(int index, int target, vector<int>& num, vector<vector<int>>& dp){
    // if the target becomes zero before the index then return 0
    if(target == 0) return 0;
    
    // now if the index becomes zero
    if(index == 0){
        // if the target % num[0] gives zero that means we can take target / num[0]
        // coins to get our target completed
        if(target % num[0] == 0){
            return target/num[0];
        }
        return 1e9;
    }

    if(dp[index][target] != -1) return dp[index][target];
    
    // now we can take the coin we have right now or dont take it
    int notTake = minmCoins(index - 1, target, num, dp);
    
    // now when we are taking the coin we should keep in mind that it should
    // not be greater than target
    int take = 1e9;
    if(num[index] <= target){
        take = 1 + minmCoins(index, target - num[index], num, dp);
    }
    
    // return the minm count
    return dp[index][target] = min(take, notTake);
}

int minimumElements(vector<int> &num, int x)
{
    int n = num.size();
    
    vector<vector<int>> dp(n, vector<int>(x + 1, -1));
    int ans = minmCoins(n - 1, x, num, dp);
    
    // if the ans is greater than or equal to 1e9 than return -1
    if(ans >= 1e9) return -1;
    else return ans;
}
