// Recursive TLE
// TC = O(2^(m+n)) and space is auxillary stack space O(m + n)
class Solution {
public:
    int countOfSubseq(int index1, int index2, string& s, string& t){
         if (index2 < 0) {
            // If t is empty, there's always 1 subsequence (the empty subsequence).
            return 1;
        }
        if (index1 < 0) {
            // If s is empty and t is not, no subsequences are possible.
            return 0;
        }
        
        // now two possibiliteis are there we can take the current index characters or not so if we are taking then we have to first match 
        // and then check we move forward and in not taking the character from the s string then just move forward
        int notTakeinS = countOfSubseq(index1 - 1, index2, s, t);

        int takeinS = 0;
        // check
        if(s[index1] == t[index2]){
            // then move forward both the indexes
            takeinS = countOfSubseq(index1 - 1, index2 - 1, s, t);
        }

        // return the sum of the take and nottake 
        return takeinS + notTakeinS;
    }
    int numDistinct(string s, string t) {
        int n1 = s.size();
        int n2 = t.size();
        return countOfSubseq(n1 - 1, n2 - 1, s, t);
    }
};

// Memoization
// TC = O(m*n) and space is auxillary stack space O(m + n)
class Solution {
public:
    int countOfSubseq(int index1, int index2, string& s, string& t, vector<vector<int>>& dp){
         if (index2 < 0) {
            // If t is empty, there's always 1 subsequence (the empty subsequence).
            return 1;
        }
        if (index1 < 0) {
            // If s is empty and t is not, no subsequences are possible.
            return 0;
        }

        if(dp[index1][index2] != -1) return dp[index1][index2];
        
        // now two possibiliteis are there we can take the current index characters or not so if we are taking then we have to first match 
        // and then check we move forward and in not taking the character from the s string then just move forward
        int notTakeinS = countOfSubseq(index1 - 1, index2, s, t, dp);

        int takeinS = 0;
        // check
        if(s[index1] == t[index2]){
            // then move forward both the indexes
            takeinS = countOfSubseq(index1 - 1, index2 - 1, s, t, dp);
        }

        // return the sum of the take and nottake 
        return dp[index1][index2] = takeinS + notTakeinS;
    }
    int numDistinct(string s, string t) {
        int n1 = s.size();
        int n2 = t.size();
        vector<vector<int>> dp(n1, vector<int>(n2, -1));
        return countOfSubseq(n1 - 1, n2 - 1, s, t, dp);
    }
};
