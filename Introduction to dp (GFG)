class Solution {
  public:
    // Memoization TC = O(N) and space = O(N)
    long long topDownApproach(int index, vector<long long>& dp){
        // we will check if there is value in the dp then no need to go down
        if(dp[index] != -1) return dp[index];
        // base condititon for termination
        if(index < 2){
            dp[index] = index;
            return dp[index];
        }
        dp[index] = topDownApproach(index - 1, dp) + topDownApproach(index - 2, dp);
        dp[index] = dp[index] % (1000000000 + 7);
        return dp[index];
    }
    long long int topDown(int n) {
        // in the top down approach we have to go till the last to get the ans and then we will sotre it to use it in when there is 
        // overlapping problem
        vector<long long> dp(n + 1, -1);
        topDownApproach(n, dp);
        // now we have the dp and in that at the index n we have our answer
        return dp[n];
        
    }
    // Two methods one where space is O(N) and other where O(1) while TC = O(N)
    long long int bottomUp(int n) {
        // now for the bottom up approach we can see that we know the last two base case in the tree
        // dp[0] = 0 and dp[1] = 1
        // also we can see that at each step we are adding the current index to the index-1 and index-2
        vector<int> dp(n + 1, -1);
        dp[0] = 0;
        dp[1] = 1;
        for(int i = 2 ; i <= n ; i++){
            dp[i] = dp[i - 1] + dp[i - 2];
            dp[i] = dp[i] % (1000000000 + 7);
        }
        int ans1 = dp[n];
        // we could also solve this without taking extra space as we are only takin two elements and making a new out of it
        int prev = 0;
        int curr = 1;
        for(int i = 2 ; i <= n ; i++){
            int temp;
            temp = prev + curr;
            temp = temp % (1000000000 + 7);
            // now just make prev = curr and curr = temp
            prev = curr;
            curr = temp;
        }
        // so when we will break out of it we have our answer in curr
        int ans2 = curr;
        // now to check if both method are working properly
        if(ans1 == ans2) return ans1;
        // else return some negative value
        return -1;
    }
};
