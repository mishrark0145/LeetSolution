//Recursion(TLE)

#include <bits/stdc++.h>

bool rec( int ind , int target , vector<int>& arr){
    if(target == 0){
        return true;
    }
    if(ind == 0){
        return (arr[0] == target);
    }
    bool picked = false;
    if( target >= arr[ind])
    picked = rec( ind - 1 , target - arr[ind] , arr);
    bool not_picked = rec( ind - 1 , target , arr);
    return picked||not_picked;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    return rec( n - 1 , k , arr);
}

//Memoization

#include <bits/stdc++.h>

bool rec( int ind , int target , vector<int>& arr , vector<vector<int>>& dp){
    if(target == 0){
        return true;
    }
    if(ind == 0){
        return (arr[0] == target);
    }
    if( dp[ind][target] != -1) return dp[ind][target];
    bool picked = false;
    if( target >= arr[ind])
    picked = rec( ind - 1 , target - arr[ind] , arr , dp);
    bool not_picked = rec( ind - 1 , target , arr,dp);
    return dp[ind][target] = picked||not_picked;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>> dp( n + 1 , vector<int>( k + 1 , -1));
    return rec( n - 1 , k , arr , dp);
}

//Tabulation

#include <bits/stdc++.h>

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>> dp( n  , vector<bool>( k + 1 , 0));
    for( int i = 0 ; i < n ; i++){
        dp[i][0] = true;
    }
    dp[0][arr[0]] = true;

    for( int ind = 1 ; ind < n ; ind++){
        for( int target = 1 ; target <= k ; target++){
            bool picked = false;
            if( target >= arr[ind])
            picked = dp[ind - 1][target - arr[ind]];
            bool not_picked = dp[ind - 1][target];
            dp[ind][target] = picked | not_picked;
        }
    }
    return dp[n-1][k];
}


