// TC = O(m*n) and space O(m*n)
class NumMatrix {
    vector<vector<int>> prefSum;
public:
    NumMatrix(vector<vector<int>>& matrix) {
        // m * n
        int m = matrix.size();
        int n = matrix[0].size();
        // now we will make the prefSum 2d arrays size as size m + 1 and n + 1 bcz we dont want to write for the base condition
        // when i and j goes outside of the prefSum array
        prefSum.resize(m + 1, vector<int>(n + 1, 0));
        // now we will make the preSum array by using the formula
        // also we will use the 1 based indexing to get rid of the boundary condition
        // preSum[i][j] = prefSum[i - 1][j] + prefSum[i][j - 1] + prefSum[i - 1][j - 1] + matrix[i - 1][j - 1](bcz we are using the 1 based indexing that why i - 1 and j - 1)
        // O(m*n)
        for(int i = 1 ; i <= m ; i++){
            for(int j = 1 ; j <= n ; j++){
                prefSum[i][j] = prefSum[i - 1][j] + prefSum[i][j - 1] - prefSum[i - 1][j - 1] + matrix[i - 1][j - 1];
            }
            cout<<endl;
        }
        // here prefSum[i][j] will represent the sum for all the cells in the rectange region top corener {0 , 0} to {i - 1, j - 1}
    }
    // constant time
    int sumRegion(int row1, int col1, int row2, int col2) {
        // now to find the sum for the rectangle row1,col1 and row2,col2
        // we will find the strip which will give the sum that we have taken extra as preSum takes from the 0,0 to i,j in one based indexing
        // top corner index do minus 1 and then make two pair with each other as {row1 - 1, col2} and {row2, col1 - 1}
        // these are the two strips that we have to subtract from the prefSum[row2][col2] but we will subtract the cell of the 
        // prefSUm[row1 - 1][col1 - 1] two time so we have to add it one time get the answer
        // also keep in mind that we have to converth the given rows and cols in 1 based indexing first then we can do the rest thing simply
        row1++, row2++, col1++, col2++;
        int sum = prefSum[row2][col2] - prefSum[row1 - 1][col2] - prefSum[row2][col1 - 1] + prefSum[row1 - 1][col1 - 1];
        return sum;
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */


// we can solve this using segment trees also 
// without using update queries
// TC = construction O(m*n*Logm * Logn)
// TC = query O(Logm * Logn)
class NumMatrix {
    vector<vector<int>> matrix;
    vector<vector<int>> segTree;
    int m, n;
    
public:
    NumMatrix(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) return;
        this->matrix = matrix;
        m = matrix.size();
        n = matrix[0].size();
        segTree.resize(4 * m, vector<int>(4 * n, 0));
        build(0, 0, m - 1, n - 1, 0, 0);
    }
    
    void build(int rowStart, int rowEnd, int colStart, int colEnd, int rowIdx, int colIdx) {
        if (rowStart > rowEnd || colStart > colEnd) return;
        if (rowStart == rowEnd && colStart == colEnd) {
            segTree[rowIdx][colIdx] = matrix[rowStart][colStart];
            return;
        }
        int rowMid = (rowStart + rowEnd) / 2;
        int colMid = (colStart + colEnd) / 2;
        build(rowStart, rowMid, colStart, colMid, 2 * rowIdx + 1, 2 * colIdx + 1);
        build(rowStart, rowMid, colMid + 1, colEnd, 2 * rowIdx + 1, 2 * colIdx + 2);
        build(rowMid + 1, rowEnd, colStart, colMid, 2 * rowIdx + 2, 2 * colIdx + 1);
        build(rowMid + 1, rowEnd, colMid + 1, colEnd, 2 * rowIdx + 2, 2 * colIdx + 2);
        segTree[rowIdx][colIdx] = segTree[2 * rowIdx + 1][2 * colIdx + 1] + segTree[2 * rowIdx + 1][2 * colIdx + 2] + 
                                  segTree[2 * rowIdx + 2][2 * colIdx + 1] + segTree[2 * rowIdx + 2][2 * colIdx + 2];
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return query(row1, col1, row2, col2, 0, 0, m - 1, n - 1, 0, 0);
    }
    
    int query(int row1, int col1, int row2, int col2, int rowStart, int colStart, int rowEnd, int colEnd, int rowIdx, int colIdx) {
        if (rowStart > rowEnd || colStart > colEnd || row1 > rowEnd || row2 < rowStart || col1 > colEnd || col2 < colStart) 
            return 0;
        if (row1 <= rowStart && row2 >= rowEnd && col1 <= colStart && col2 >= colEnd) 
            return segTree[rowIdx][colIdx];
        int rowMid = (rowStart + rowEnd) / 2;
        int colMid = (colStart + colEnd) / 2;
        int sum1 = query(row1, col1, row2, col2, rowStart, colStart, rowMid, colMid, 2 * rowIdx + 1, 2 * colIdx + 1);
        int sum2 = query(row1, col1, row2, col2, rowStart, colMid + 1, rowMid, colEnd, 2 * rowIdx + 1, 2 * colIdx + 2);
        int sum3 = query(row1, col1, row2, col2, rowMid + 1, colStart, rowEnd, colMid, 2 * rowIdx + 2, 2 * colIdx + 1);
        int sum4 = query(row1, col1, row2, col2, rowMid + 1, colMid + 1, rowEnd, colEnd, 2 * rowIdx + 2, 2 * colIdx + 2);
        return sum1 + sum2 + sum3 + sum4;
    }
};


// With update query also
// TC = construction O(m*n*Logm * Logn)
// TC = query O(Logm * Logn)
// TC = update O(Logm * Logn)

class NumMatrix {
    vector<vector<int>> matrix;
    vector<vector<int>> segTree;
    int m, n;
    
public:
    NumMatrix(vector<vector<int>>& matrix) {
        if (matrix.empty() || matrix[0].empty()) return;
        this->matrix = matrix;
        m = matrix.size();
        n = matrix[0].size();
        segTree.resize(4 * m, vector<int>(4 * n, 0));
        build(0, 0, m - 1, n - 1, 0, 0);
    }
    
    void build(int rowStart, int rowEnd, int colStart, int colEnd, int rowIdx, int colIdx) {
        if (rowStart > rowEnd || colStart > colEnd) return;
        if (rowStart == rowEnd && colStart == colEnd) {
            segTree[rowIdx][colIdx] = matrix[rowStart][colStart];
            return;
        }
        int rowMid = (rowStart + rowEnd) / 2;
        int colMid = (colStart + colEnd) / 2;
        build(rowStart, rowMid, colStart, colMid, 2 * rowIdx + 1, 2 * colIdx + 1);
        build(rowStart, rowMid, colMid + 1, colEnd, 2 * rowIdx + 1, 2 * colIdx + 2);
        build(rowMid + 1, rowEnd, colStart, colMid, 2 * rowIdx + 2, 2 * colIdx + 1);
        build(rowMid + 1, rowEnd, colMid + 1, colEnd, 2 * rowIdx + 2, 2 * colIdx + 2);
        segTree[rowIdx][colIdx] = segTree[2 * rowIdx + 1][2 * colIdx + 1] + segTree[2 * rowIdx + 1][2 * colIdx + 2] + 
                                  segTree[2 * rowIdx + 2][2 * colIdx + 1] + segTree[2 * rowIdx + 2][2 * colIdx + 2];
    }
    
    void update(int row, int col, int val, int rowStart, int rowEnd, int colStart, int colEnd, int rowIdx, int colIdx) {
        if (rowStart == rowEnd && colStart == colEnd) {
            segTree[rowIdx][colIdx] = val;
            return;
        }
        int rowMid = (rowStart + rowEnd) / 2;
        int colMid = (colStart + colEnd) / 2;
        if (row <= rowMid && col <= colMid) {
            update(row, col, val, rowStart, rowMid, colStart, colMid, 2 * rowIdx + 1, 2 * colIdx + 1);
        } else if (row <= rowMid && col > colMid) {
            update(row, col, val, rowStart, rowMid, colMid + 1, colEnd, 2 * rowIdx + 1, 2 * colIdx + 2);
        } else if (row > rowMid && col <= colMid) {
            update(row, col, val, rowMid + 1, rowEnd, colStart, colMid, 2 * rowIdx + 2, 2 * colIdx + 1);
        } else {
            update(row, col, val, rowMid + 1, rowEnd, colMid + 1, colEnd, 2 * rowIdx + 2, 2 * colIdx + 2);
        }
        segTree[rowIdx][colIdx] = segTree[2 * rowIdx + 1][2 * colIdx + 1] + segTree[2 * rowIdx + 1][2 * colIdx + 2] + 
                                  segTree[2 * rowIdx + 2][2 * colIdx + 1] + segTree[2 * rowIdx + 2][2 * colIdx + 2];
    }
    
    int query(int row1, int col1, int row2, int col2, int rowStart, int colStart, int rowEnd, int colEnd, int rowIdx, int colIdx) {
        if (rowStart > rowEnd || colStart > colEnd || row1 > rowEnd || row2 < rowStart || col1 > colEnd || col2 < colStart) 
            return 0;
        if (row1 <= rowStart && row2 >= rowEnd && col1 <= colStart && col2 >= colEnd) 
            return segTree[rowIdx][colIdx];
        int rowMid = (rowStart + rowEnd) / 2;
        int colMid = (colStart + colEnd) / 2;
        int sum1 = query(row1, col1, row2, col2, rowStart, colStart, rowMid, colMid, 2 * rowIdx + 1, 2 * colIdx + 1);
        int sum2 = query(row1, col1, row2, col2, rowStart, colMid + 1, rowMid, colEnd, 2 * rowIdx + 1, 2 * colIdx + 2);
        int sum3 = query(row1, col1, row2, col2, rowMid + 1, colStart, rowEnd, colMid, 2 * rowIdx + 2, 2 * colIdx + 1);
        int sum4 = query(row1, col1, row2, col2, rowMid + 1, colMid + 1, rowEnd, colEnd, 2 * rowIdx + 2, 2 * colIdx + 2);
        return sum1 + sum2 + sum3 + sum4;
    }

    void update(int row, int col, int val) {
        matrix[row][col] = val;
        update(row, col, val, 0, m - 1, 0, n - 1, 0, 0);
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return query(row1, col1, row2, col2, 0, 0, m - 1, n - 1, 0, 0);
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 * obj->update(row, col, val);
 */


