// O(32)
class Solution {
public:
    int minBitFlips(int start, int goal) {
        int count = 0;
        while(start != 0 || goal != 0){
            // getting the right most bit for start and goal
            int startBit = start & 1;
            int goalBit = goal & 1;
            // now shifting the goal and start right shift
            start = start >> 1;
            goal = goal >> 1;
            // now if the xor of startbit and goalbit is one that menas we have to change the bit
            if(startBit ^ goalBit == 1){
                // so do the count++
                count++;
            }
        }
        return count;    
    }
};


// O(32)
class Solution {
public:
    int minBitFlips(int start, int goal) {
        int count = 0;
        // do first the XOR of the numbers so that the number of 1 bit in the xor will give us the answer the number of bit we have to flip
        int xorValue = start ^ goal;
        while(xorValue > 0){
            if(xorValue & 1 == 1) count++;
            // right shift the xorValue
            xorValue = xorValue >> 1;
        }
        return count;    
    }
};

// O(32)
class Solution {
public:
    int getBit(int n, int pos){
        if(n&(1<<(pos-1))){
            return 1;
        }
        return 0;
    }
    int minBitFlips(int start, int goal) {
        int count=0;
        for(int i=1; i<32; i++){
            if(getBit(start, i)^getBit(goal, i)){
                count++;
            }
        }
        return count;
    }
};
