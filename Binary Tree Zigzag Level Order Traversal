/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if( root == nullptr) return ans;
        queue<TreeNode*> q;
        q.push(root);
        while( !q.empty()){
            int size = q.size();
            vector<int> level;
            for( int i = 0 ; i < size ; i++){
                TreeNode* node = q.front();
                q.pop();
                if( node -> left != nullptr) q.push( node -> left);
                if( node -> right != nullptr) q.push( node -> right);
                level.push_back( node -> val);
            }
            ans.push_back(level);
        }
        //first we have done the level order traversal
        //then we are alternatively reversing the row on the odd level starting root at 0 level
        for( int i = 0 ; i < ans.size() ; i++){
            if( i % 2 != 0){
                reverse( ans[i].begin() , ans[i].end());
            }
        }
        return ans;
    }
};
