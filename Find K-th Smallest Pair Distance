// Brute force
// TC = O(n^2 + O(10^6)) ans space is O(10^6)
class Solution {
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        // here we founded and stored in the arr , where the index will tell the absolute difference and the vlaue of that index will
        // tell how many pairs are there whose abs difference is the index
        vector<int> arr(1000000 + 1, 0);
        int n = nums.size();
        for(int i = 0 ; i < n ; i++){
            for(int j = i + 1 ; j < n ; j++){
                int absDiff = abs(nums[i] - nums[j]);
                arr[absDiff]++;
            }
        }
        int cnt = k;
        for(int i = 0 ; i < arr.size() ; i++){
            // we will minus the count of diffrences from the count variable
            cnt = cnt - arr[i];
            // if the cnt becomes less than equal to zero that means the current index is our solution
            if(cnt <= 0){
                return i;
            }
        }
        return -1;
    }
};


// Optimal Solution
// TC = O(nLogn + MlogM)
class Solution {
public:
    int findcountPair(vector<int>& nums, int D){
        int i = 0;
        int j = 1;
        int n = nums.size();
        int pairCnt = 0;
        while(j < n){
            while(nums[j] - nums[i] > D){
                i++;
            }
            pairCnt += (j - i);
            j++;
        }
        return pairCnt;
    }

    int smallestDistancePair(vector<int>& nums, int k) {
        int n = nums.size();
        // nLogn
        sort(nums.begin(), nums.end());
        int l = 0;
        int r = nums[n - 1] - nums[0];
        // here l and r represent the 0 and maxm diff we can get in the array
        // now we will apply the binary search on answers like the intution here is we will find the count we can get
        // if we have a certain abs diff and if the count of pairs for that distance in the array is less than k left will increase by
        // mid + 1 otherwise if greater than equal to then result is equal to mid and then move right to mid - 1
        int result;
        // MLog(M)
        while(l <= r){
            int mid = (l + r) / 2;
            // this will give the count of pairs in the array whose diff is less than or equal to mid
            // O(M)
            int countPair = findcountPair(nums, mid);
            if(countPair < k){
                l = mid + 1;
            }
            else{
                result = mid;
                r = mid - 1;
            } 
        }
        return result;
    }
};
