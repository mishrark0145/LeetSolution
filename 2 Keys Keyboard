// Optimal Approach
// TC = O(sqrt(n)) and constant space
class Solution {
public:
    int minSteps(int n) {
        // we have to add the prime factors of the number to get the steps
        int step = 0;
        while(n % 2 == 0){
            step += 2;
            n = n / 2;
        }
        // now we will start from i = 3 and we will go till sqrt(n)
        // n must be odd at this point. So we can skip 
        // one element (Note i = i + 2) 
        for(int i = 3 ; i <= sqrt(n) ; i = i + 2){
            while(n % i == 0){
                step += i;
                n = n / i;
            }
        }
        // This condition is to handle the case when n 
        // is a prime number greater than 2
        if(n > 2){
            step += n;
        }
        return step;
    }
};


// Recusive 
// TC = O(2^n) and auxilary space O(n)
class Solution {
public:
    int minSteps(int n) {
        // we can perform copy all then paste operation or only paste operation
        if(n == 1) return 0;
        // first step is copy all opeation
        return 1 + steps(1, 1, n);
    }

    int steps(int currLen, int pasteLen, int n){
        if(currLen == n){
            return 0;
        }
        if(currLen > n){
            return 1000;
        }
        // copy all plus paste
        int copyPaste = 2 + steps(2*currLen, currLen, n);
        // paste all the things on the board
        int paste = 1 + steps(currLen + pasteLen, pasteLen, n);
        return min(copyPaste, paste);
    }
};


// Memoization
// TC = O(n^2) and space is O(n^2) 
class Solution {
public:
    int minSteps(int n) {
        // we can perform copy all then paste operation or only paste operation
        if(n == 1) return 0;
        // first step is copy all opeation
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, -1));
        return 1 + steps(1, 1, n, dp);
    }

    int steps(int currLen, int pasteLen, int n, vector<vector<int>>& dp){
        if(currLen == n){
            return 0;
        }
        if(currLen > n){
            return 1000;
        }
        if(dp[currLen][pasteLen] != -1) return dp[currLen][pasteLen];
        // copy all plus paste
        int copyPaste = 2 + steps(2*currLen, currLen, n, dp);
        // paste all the things on the board
        int paste = 1 + steps(currLen + pasteLen, pasteLen, n, dp);
        return dp[currLen][pasteLen] = min(copyPaste, paste);
    }
};
