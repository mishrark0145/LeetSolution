/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* slow;
        slow=head;
        ListNode* fast;
        fast=head;
        if(head==NULL){
            return NULL;
        }
        //this condition will give the slow as the middle element of the list also in case when the no of elelments in the list is even we have two middle elements the slow will return the second middle element as the question is asking
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
};
