//Recursive Approach
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        //we will do this by any traversal technique
        //we will use preorder traversal recursive
        if( p == nullptr || q == nullptr){
            return p == q;
        }
        return (p->val == q->val) && isSameTree(p->left , q->left) && isSameTree(q->right , p->right) ;
    }
};

//Iterative approach
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        stack<TreeNode*> s1, s2;
        s1.push(p);
        s2.push(q);

        while (!s1.empty() && !s2.empty()) {
            TreeNode* node1 = s1.top();
            s1.pop();
            TreeNode* node2 = s2.top();
            s2.pop();

            if (node1 == nullptr && node2 == nullptr) continue;
            if (node1 == nullptr || node2 == nullptr) return false;
            if (node1->val != node2->val) return false;

            s1.push(node1->right);
            s1.push(node1->left);
            s2.push(node2->right);
            s2.push(node2->left);
        }

        return s1.empty() && s2.empty();
    }
};

