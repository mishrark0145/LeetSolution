class Solution {
public:
    int minDistance(string word1, string word2) {
        int n1 = word1.size();
        int n2 = word2.size();

        vector<vector<int>> dp( n1 + 1 , vector<int>( n2 + 1 , -1));

        for( int i = 1 ; i <= n1 ; i++){
            dp[i][0] = 0;
        }
        for(int j = 0 ; j <= n2 ; j++){
            dp[0][j] = 0;
        }

        for( int ind1 = 1 ; ind1 <= n1 ; ind1++){
            for( int ind2 = 1 ; ind2 <= n2 ; ind2++){
                //if matches
                if( word1[ind1 -1] == word2[ind2 - 1]){
                    dp[ind1][ind2] = 1 + dp[ind1 -1][ind2 -1];
                }
                else{
                    dp[ind1][ind2] = max( dp[ind1 -1][ind2] , dp[ind1][ind2 -1]);
                }
            }
        }
        //here we have first calculated the lcs between the two string
        //then to make them same 
        //we deleted the uncommon from both of them that will be the minimum number of operations to make the string equal
        int common = dp[n1][n2];
        int ans = n1 - common + n2 - common;
        return ans;
    }
};
