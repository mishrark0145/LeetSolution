// TC = O(2*m*n) and space is O(m*n)
class Solution {
public:
    int minDistance(string word1, string word2) {
        // We can use here the Longest common subsequence method as that would be the largest common to both the strings
        int m = word1.size();
        int n = word2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for(int i = 1 ; i <= m ; i++){
            for(int j = 1; j <= n ; j++){
                // if they matches
                if(word1[i - 1] == word2[j - 1]){
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                }
                else{
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        int lcs = dp[m][n];
        //here we have first calculated the lcs between the two string
        //then to make them same 
        //we deleted the uncommon from both of them that will be the minimum number of operations to make the string equal
        // now the minm number of character to delete would be len1 + len2 - 2*lcs
        return m + n - 2*lcs;
    }
};
