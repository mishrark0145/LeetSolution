class Solution {
public:

    // we will be using the dfs technique to find the province
    // here we can use the visited array to our use
    // like start from any arbitary node do the dfs traversal and after it completed move on
    // to the next un visited nodes it can be in any order
    // so by doing that we will be able to count the province
    int findCircleNum(vector<vector<int>>& isConnected) {
        int V = isConnected.size();
        vector<int> visited(V , 0);
        int ans = 0;
        for( int node = 0 ; node < V ; node++){
            if( visited[node] != 1){
                dfs(node , visited , isConnected);
                ans++;
            }
        }
        return ans;
    }

    void dfs( int node , vector<int>& visited , vector<vector<int>>& isConnected){
        visited[node] = 1;
        // going through all the neighbours
        int n = isConnected.size();
        for( int i = 0 ; i < n ; i++){
            if( isConnected[node][i] == 1 && i != node && visited[i] != 1){
                dfs( i , visited , isConnected);
            }
        }
        return;
    }
    // time complexity = O(N) + O(V + 2E)
};
