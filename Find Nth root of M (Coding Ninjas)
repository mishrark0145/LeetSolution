// TC = O(n*Logm)
int func(int mid, int n, int m){
  long long ans = 1;
  // we have to multiply the mid by n times
  for(int i = 1; i <= n ; i++){
    ans = ans * mid;

    if(ans > m) return 2;
  }
  if(ans == m) return 1;
  return 0;
}

int NthRoot(int n, int m) {
  // To get he nth root of m we will use the similar technique that we have used to find the square root of x
  // now since here we will be multipying 'm' , 'n' times we should take into cosideration that it will
  // might get overflow so what we can do is we will call the multiply fuction and we will multiply it 
  // iteratively so that we will not get overflow  
  int low = 1;
  int high = m;
  while(low <= high){
    int mid = (low + high) / 2;
    int midVal = func(mid, n, m);
    // if midVal == 1
    if(midVal == 1) return mid;
    // now if the midVal is greate than m
    else if(midVal == 2){
      // eliminate the right half
      high = mid - 1;
    }
    else{
      low = mid + 1;
    }
  }
  return -1;
}
