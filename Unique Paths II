//Memoization

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp( m , vector<int>(n , -1));
        return rec( m - 1 , n - 1 , obstacleGrid , dp);
    }

    int rec( int row , int col , vector<vector<int>>& obstacleGrid , vector<vector<int>>& dp){
        if( row >= 0 && col >= 0 && obstacleGrid[row][col] == 1) return 0;
        if( row == 0 && col == 0){
            if( obstacleGrid[row][col] == 0 )
                return 1;
            else return 0;    
        }
        if( row < 0 || col < 0) return 0;
        if( dp[row][col] != -1) return dp[row][col];
        int up = 0;
        int left = 0;
        up = rec( row - 1 , col , obstacleGrid , dp);
        left = rec( row , col - 1 , obstacleGrid ,dp);
        return dp[row][col] = left + up;
    }
};

//Tabulation

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp( m , vector<int>(n , -1));
        
        for( int row = 0; row < m ; row++){
            for( int col = 0; col < n ; col++){
                if( obstacleGrid[row][col] == 1){ 
                    dp[row][col] = 0;
                    continue;
                }
                if( row == 0 && col == 0){
                    if( obstacleGrid[0][0] == 0) dp[0][0] = 1;
                    else dp[0][0] = 0;
                    continue;
                }
                int up = 0;
                int left = 0;
                if( row != 0) up = dp[row - 1][col];
                if( col != 0) left = dp[row][col -1];
                dp[row][col] = left + up; 
            }
        }
        return dp[ m - 1][ n - 1];
    }
};
