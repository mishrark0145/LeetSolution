// This will give TLE as the while loop is running on it and it will be directly proportional to k if the array has number very less
// and k is  <= 10 ^ 9 so it will give TLE
class Solution {
public:
    int chalkReplacer(vector<int>& chalk, int k) {
        int it = 0;
        int n = chalk.size();
        while(true){
            k = k - chalk[it % n];
            if(k < 0){
                return it % n;
            }
            it++;
        }
        return -1;
    }
};

// Better solution 
// TC = O(2*n) and constant space
class Solution {
public:
    int chalkReplacer(vector<int>& chalk, int k) {
        // we find the sum and take the remainder then we have to only check for the remainder
        long long sum = 0;
        int n = chalk.size();
        for(auto num : chalk){
            sum += num;
        }
        int rem = k % sum;
        for(int i = 0 ; i < n ; i++){
            rem -= chalk[i];
            if(rem < 0) return i;
        }
        return -1;
    }
};

// Optimal Solution
// TC = O(n + nLogn)
class Solution {
public:
    int chalkReplacer(vector<int>& chalk, int k) {
        int n = chalk.size();
        vector<long long> prefSum(n, 0);
        prefSum[0] = chalk[0];
        for (int i = 1; i < n; i++) {
            prefSum[i] = prefSum[i - 1] + chalk[i];
        }
        int rem = k % prefSum[n - 1];
        return searchRem(rem, prefSum);
    }

    int searchRem(int rem, vector<long long>& prefSum) {
        int low = 0;
        int high = prefSum.size() - 1;

        while (low < high) {
            int mid = low + (high - low) / 2;

            if (prefSum[mid] <= rem) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return high;  
    }
};
