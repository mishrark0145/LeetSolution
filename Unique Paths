// Memoization

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp( m , vector<int>(n , -1));
        return rec(m - 1 , n - 1 , dp);
    }

    int rec( int row , int col , vector<vector<int>>& dp){
        if( row == 0 && col == 0){
            return 1;
        }
        if( dp[row][col] != -1) return dp[row][col];
        int up = 0;
        int left = 0;
        if( row != 0)
            up = 0 + rec( row - 1 , col , dp);
        if( col != 0)    
            left = 0 + rec( row , col - 1 , dp);
        return dp[row][col] = left + up;    
    }
};

//Tabulation

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp( m , vector<int>(n , 0));
        dp[0][0] = 1;
        for( int row = 0 ; row < m ; row++){
            for( int col = 0 ; col < n ; col++){
                int up = 0 ;
                int left = 0;
                if( row != 0) up = dp[row - 1][col];
                if( col != 0) left = dp[row][col - 1];
                if( row != 0 || col != 0){
                    dp[row][col] = up + left;
                }
            }
        }
        
        return dp[ m - 1][ n - 1];
    }     
};

//Space Optimization

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> prev( n , 1);
        int temp = 1;
        for( int row = 1 ; row < m ; row++){
            for( int col = 0 ; col < n ; col++){
                int up = prev[col];
                int left = temp;
                if( col == 0) left = 0;
                temp = up + left;
                prev[col] = temp;
            }
        }
        return prev[n - 1];
    }     
};
