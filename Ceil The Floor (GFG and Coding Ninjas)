// Coding Ninjas
// TC = O(LogN) when the array is sorted we can use the Binary Search to find that
pair<int, int> getFloorAndCeil(vector<int> &arr, int n, int x) {
	pair<int, int> ans = {-1, -1};
	int floor = ans.first;
	int ceil = ans.second;
	int low = 0;
	int high = n - 1;
	while(low <= high){
		int mid = (low + high) / 2;
		if(arr[mid] == x){
			floor = arr[mid];
			ceil = arr[mid];
			break;
		}
		else if(arr[mid] < x){
			// it can be the floor
			floor = arr[mid];
			low = mid + 1;
		}
		else{
			// it can be ceiling
			ceil = arr[mid];
			high = mid - 1;
		}
	}
	ans.first = floor;
	ans.second = ceil;
	return ans;
}	

// GFG
// If the array is not sorted TC = O(N)
class Solution {
  public:
    vector<int> getFloorAndCeil(int x, vector<int> arr) {
        vector<int> ans = {-1, -1};
        // ans[0] represent floor and ans[1] represents ceil
        int n = arr.size();
        for(int i = 0 ; i < n ; i++){
            // floor value
            if(arr[i] <= x){
                // check for the upper bound as suppose we get something very less but the upper bound that is the floor value
                // is greater than that than no need to change it 
                if(ans[0] == -1 || ans[0] < arr[i])
                    ans[0] = arr[i];
            }
            // ceiling value
            if(arr[i] >= x){
                // this will check if the previous ceiling value is greater than this one than take the current value as ceiling
                // value otherwise leave it as it is bcz then current value will not be the lower bound 
                if(ans[1] == -1 || ans[1] > arr[i])
                    ans[1] = arr[i];
            }
        }
        return ans;
    }
};
