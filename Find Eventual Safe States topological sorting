class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        // if we just reverse the edges directed towards the nodes then we can 
        // apply the topological sort and the answer that will be stored in the array will
        // be the safe nodes

        // reverse the edges
        int V = graph.size();
        vector<int> adj[V];

        for(int i = 0 ; i < V ; i++){
            for(int j = 0 ; j < graph[i].size() ; j++){
                adj[graph[i][j]].push_back(i);
            }
        }
        
        // now we will find the indegrees
        vector<int> indegree(V , 0);
        for(int i = 0 ; i < V ; i++){
            for(auto it : adj[i]){
                indegree[it]++;
            }
        }

        // now we will add the terminal nodes first in the queue

        queue<int> q;
        for( int i = 0 ; i < V ; i++){
            if( indegree[i] == 0){
                q.push(i);
            }
        }


        vector<int> topo;
        //now we will start the while loop
        while(!q.empty()){
            int node = q.front();
            q.pop();
            topo.push_back(node);

            //traversing the neighbours
            for(auto ver : adj[node]){
                indegree[ver]--;
                if(indegree[ver] == 0){
                    q.push(ver);
                }
            }
        }

        //at last we will return the topo array after sorting
        sort( topo.begin() , topo.end());
        return topo;
    }
};
