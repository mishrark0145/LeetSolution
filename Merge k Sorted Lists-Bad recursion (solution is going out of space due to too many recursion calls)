/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty())
            return nullptr;
            
        return mergeHelper(lists,lists.size(),0);
    }

    ListNode* mergeHelper(vector<ListNode*> lists,int size,int i){
        if(size <= 1)
        return lists[i];
        ListNode* lh = lists[i];
        ListNode* rh = mergeHelper(lists,size-1,i+1);
        return  merge(lh,rh);
    }

    ListNode* merge(ListNode* lh,ListNode* rh){
        ListNode* dummy = new ListNode(0);
        ListNode* node;
        node = dummy;
        while(lh != NULL && rh != NULL){
            if(lh->val > rh->val){
                dummy->next = rh;
                dummy = dummy->next;
                rh = rh->next;
            }
            else{
                dummy->next = lh;
                dummy = dummy->next;
                lh = lh->next;
            }
        }
        while(rh != NULL){
            dummy->next = rh;
            dummy = dummy->next;
            rh = rh->next;
        }
        while(lh != NULL){
            dummy->next = lh;
            dummy = dummy->next;
            lh = lh->next;
        }
        dummy->next = NULL;
        return node->next;
    }
};
