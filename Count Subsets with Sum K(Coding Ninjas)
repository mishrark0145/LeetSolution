//Memoization

int rec( int ind , vector<int>& arr , int target , vector<vector<int>>& dp ){
	if( ind == -1 ){
		return target == 0;
	}
	if( dp[ind][target] != -1) return dp[ind][target];
	int not_take = rec( ind - 1 , arr , target  , dp);
	int take = 0;
	if( arr[ind] <= target)
		take = rec( ind - 1 , arr , target - arr[ind] , dp );
	return dp[ind][target] = (take + not_take)%(1000000007);
}

int findWays(vector<int>& arr, int k)
{
	int n = arr.size();
	vector<vector<int>> dp( n , vector<int>( k + 1 , -1));
	int result = rec( n - 1 , arr , k , dp );
	// cout<<result<<endl;
	return  result%(1000000007);
}

//Tabulation(49/50 test cases passed)

int findWays(vector<int>& arr, int k) {
    int n = arr.size();
    vector<vector<int>> dp(n, vector<int>(k + 1, 0));

    if( arr[0] == 0) dp[0][0] = 2;
    else dp[0][0] = 1;
    if( arr[0] != 0 && arr[0] <= k) dp[0][arr[0]] = 1;

    // Fill the dp table using a bottom-up approach.
    for (int i = 1; i < n; i++) {
        for (int j = 0; j <= k; j++) {
            int not_take = dp[i - 1][j];
            int take = 0;
            if (arr[i] <= j)
                take = dp[i - 1][j - arr[i]];
            dp[i][j] = (take + not_take) % 1000000007;
        }
    }

    return dp[n - 1][k] % 1000000007;
}
