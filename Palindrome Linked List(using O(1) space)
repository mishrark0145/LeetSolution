/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if( head == nullptr || head -> next == nullptr) return true;
        ListNode* mid;
        ListNode* slow;
        slow = head;
        ListNode* fast;
        fast = head;
        while( fast != nullptr && fast -> next != nullptr){
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        mid = slow;
        if(fast != nullptr){
            mid = mid -> next;
        }

        ListNode* dummy = nullptr;
        while( mid != nullptr ){
            ListNode* temp = mid -> next;
            mid -> next = dummy;
            dummy = mid;
            mid = temp;
        }
        // dummy is your new head of the reversed linked list after the mid of the linked list

        while( dummy != nullptr){
            if(dummy -> val == head -> val){
                dummy = dummy -> next;
                head = head -> next;
            }
            else
            return false;
        }
        return true;

    }
};
