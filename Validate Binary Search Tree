// My Solution
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        // we will do inorder traversal bcz inorder will give us sorted ans and if it not sorted then 
        // it is not BST
        // we will get the first value of the inorder which will be most left element
        if(root == nullptr) return true;
        // We are taking the first node in inorder to be minimum
        long long firstNode = LLONG_MIN;
        return sortedCheck(root, firstNode);
    }

    bool sortedCheck(TreeNode* root, long long& prevNode){
        // As the traversal will be inorder it will be left root right
        bool left = true;
        if(root->left){
            left = sortedCheck(root->left, prevNode);
        }
        // Now we are at the node and we have to take this in consideration
        if(prevNode >= root->val){
            return false;
        }
        prevNode = root->val;
        bool right = true;
        // Now we will go right
        if(root->right){
            right = sortedCheck(root->right, prevNode);
        }
        // if we get any one of them to be false 
        if((left && right) == false){
            return false;
        }
        // Otherwise return true
        return true;
    }
};

// Little clean code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        long long prevNode = LLONG_MIN;
        return sortedCheck(root, prevNode);
    }

private:
    bool sortedCheck(TreeNode* root, long long& prevNode) {
        if (!root) return true;

        // Check left subtree
        if (!sortedCheck(root->left, prevNode)) return false;

        // Check current node
        if (root->val <= prevNode) return false;
        prevNode = root->val;

        // Check right subtree
        return sortedCheck(root->right, prevNode);
    }
};
