// TC = O(n^2)
class Solution {
public:
    int numTeams(vector<int>& rating) {
        // we have solved this using if we are at the middle element j then supoose a is no of elements < j in left side and b is no of 
        // elements > j left side and c is no of elements > j right side and d is no of elements < j right side
        // so for a paritcular middle element no of teams or triplets = a * c + b * d
        // so we will iterate from j = 1 to j = n - 2 to get all the triplets
        int n = rating.size();
        int cnt = 0;
        for(int j = 1; j < n - 1 ; j++){
            // for each j count the left and right then we will mulitply them to get the unique teams
            int left = j - 1;
            int right = j + 1;
            int mid = rating[j];
            int leftGreatCnt = 0;
            int rightSmalCnt = 0;
            int leftSmalCnt = 0;
            int rightGreatCnt = 0;
            while(left >= 0){
                // for the left greatest count
                if(rating [left] > mid ) leftGreatCnt++;
                // for the left smallest count
                if(rating[left] < mid) leftSmalCnt++;
                left--;
            }
            while(right <= n - 1){
                // for the right smallest count
                if(rating[right] < mid) rightSmalCnt++;
                // for the right greatest count
                if(rating[right] > mid) rightGreatCnt++;
                right++;
            }
            // now we got the each smallest and greatest count for left and right both so jsut multply that to get the triplet count including the mid
            cnt += (leftGreatCnt * rightSmalCnt) + (leftSmalCnt * rightGreatCnt);
        }
        return cnt;
    }
};
