// Greedy Soultion Optimal
// TC = O(n) and constant space complexity 
class Solution {
public:
    int jump(vector<int>& nums) {
        // We will solve this using greedy, the problem is saying we wanted to take minm jums to reach the n - 1 index
        // so instead of trying out all possibilities we can simple jump from the current index to set of range betwenn l to r 
        // and say that we got the first jump between them so it is like we can reach for the second jump from the range l to r
        // so now we will be finding the range l and r for the jmps we will take
        int n = nums.size();
        // initially l and r = 0
        int l = 0;
        int r = 0;
        // now after taking the jmp l just 1 ahead of r
        // and the r will be how farthest we can reach from the range l to r so what we will have to do is find the farthest point
        // going through the l to r
        int jmps = 0;
        // if the r have reached the n - 1 then we have reached our last index so no need to go further
        while(r < n - 1){
            int farthest = 0;
            for(int ind = l ; ind <= r ; ind++){
                farthest = max(farthest, ind + nums[ind]);
            }
            // this will be the 1st jmp to the ranges l to r
            jmps++;
            l = r + 1;
            r = farthest;
        }
        return jmps;
    }
};


// Memoization better soultion 
// TC = O(n^2) and space is O(n) and O(n) auxilary space
class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, -1);
        return fnc(0, nums, dp);
    }

    int fnc(int index, vector<int>& nums, vector<int>& dp){
        if(index == nums.size() - 1){
            return 0;
        }
        if(dp[index] != -1) return dp[index];
        int mini = INT_MAX;
        int jmp = 0;
        for(int j = 1 ; j <= nums[index] && index + j < nums.size() ; j++){
            jmp = fnc(j + index, nums, dp);
            if(jmp != INT_MAX){
                mini = min(mini, jmp + 1);
            }  
        }
        return dp[index] = mini;
    }
};

// Tabulation better solution
// TC = O(n^2) and space is O(n)
class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n, -1);
        // we will be doing bottom up approach bcz in memoization we are reaching from 0 to n - 1 so here we have to start
        // form n - 1 and then go to 0
        // dp[n - 1] = 0 bcz for the fist index jmp would be zero
        dp[n - 1] = 0;
        for(int i = n - 2 ; i >= 0 ; i--){
            int mini = INT_MAX;
            for(int j = 1 ; j <= nums[i] && i + j < n ; j++){
                int jmp = dp[i + j];
                if(jmp != INT_MAX){
                    mini = min(mini, 1 + jmp);
                }
            }
            dp[i] = mini;
        }
        return dp[0];
    }
};
