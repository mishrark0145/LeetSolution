//Recursion

class Solution {
public:
    int rob(vector<int>& nums) {
        return rec( nums.size() - 1 , nums);
    }

    int rec( int i , vector<int>& nums){
        if( i == 0) return nums[i];
        if( i < 0 ) return 0;
        int pick = nums[i] + rec( i - 2 , nums);
        int not_picked = 0 + rec( i - 1 , nums);
        return max( pick , not_picked);
    }
};

//Memoization

class Solution {
public:
    int rob(vector<int>& nums) {
        // if we are taking the money from a house then we have to skip the next one
        // if not then we can take the money from the next house
        // so we will use the recursion
        // as there are overlapping subproblems we should introduce memoization
        // using n based indexing
        vector<int> dp(nums.size(), -1);
        return robbingHouses(nums.size() - 1, nums, dp); 
    }

    int robbingHouses(int index, vector<int>& nums, vector<int>& dp){
        // base case
        if(index < 0){
            return 0;
        }
            if(dp[index] != -1) return dp[index];
        // if we are taking the money
        int take = nums[index] + robbingHouses(index - 2, nums, dp);
        // if we are not robbing this house
        int notTake = robbingHouses(index - 1, nums, dp);
            // now we to return the maximum
        return dp[index] = max(take, notTake);
    } 
};


//Tabulation

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp( n + 2 , -1);
        dp[0] = 0;
        dp[1] = nums[0];
        for( int i = 2 ; i <= n ; i++){
            int pick = nums[i - 1] + dp[i - 2];
            int not_picked = dp[i - 1];
            dp[i] = max( pick , not_picked);
        }
        return dp[n];
    }

};

//Space Optimization

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        int prev2 = 0;
        int prev1 = nums[0];
        for( int i = 2 ; i <= n ; i++){
            int pick = nums[i - 1] + prev2;
            int not_picked = prev1;
            int curr = max( pick , not_picked);
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }

};

