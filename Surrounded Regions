class Solution {
public:

    void dfs( int row , int col , vector<vector<char>>& board , vector<vector<int>>& visited){
        visited[row][col] = 1;
        int m = board.size();//row
        int n = board[0].size();//col
        vector<pair<int,int>> directions = { {0,-1} , {-1,0} , {0 ,1} , {1,0}};
        //visting the neighbours
        for( auto dir : directions){
            int nrow = row + dir.first;
            int ncol = col + dir.second;
            if(nrow < m && nrow >= 0 && ncol < n && ncol >= 0 && board[nrow][ncol] == 'O' && visited[nrow][ncol] == 0){
                dfs(nrow, ncol , board , visited);
            }
        }
    }

    void solve(vector<vector<char>>& board) {
        // quetion is saying that we should flip all O`s to X if set of O`s
        //is surrounded by X in all the four regions
        
        //we can think if any set of O is at boundary than the set of O cannot be surrounded by X
        //so we only have to check for the boundary O and then traverse to all the other nodes connected to it
        int m = board.size();
        int n = board[0].size();
        vector<vector<int>> visited( m , vector<int>( n , 0));

        for( int i = 0 ; i < m ; i++){
            for( int j = 0 ; j < n ; j++){
                if( board[i][j] == 'O' && ( i == 0 || j == 0 || j == n - 1 || i == m - 1) && visited[i][j] == 0){
                    dfs( i , j ,board , visited);
                }
            }
        }
        //now according to the visited O that will not gonna be change 
        // we will traverse the visited array and mark the changes
        for( int i = 0 ; i < m ; i++){
            for( int j = 0 ; j < n ; j++){
                if( visited[i][j] != 1 && board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }
    }
};
