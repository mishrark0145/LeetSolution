//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  private:
  
    void dfs( int row , int col , vector<pair<int,int>>& temp , vector<vector<int>>& visited , vector<vector<int>>& grid , vector<pair<int,int>> directions , pair<int,int> base){
        visited[row][col] = 1;
        //here we will gonna store the row and columns and also minus the base
        int setrow = row - base.first;
        int setcol = col - base.second;
        temp.push_back({setrow,setcol});
        int n = grid.size();
        int m = grid[0].size();
        //traversing the neighbours
        for( auto dir : directions){
            int nrow = row + dir.first;
            int ncol = col + dir.second;
            if( nrow < n && nrow >= 0 && ncol < m && ncol >= 0 && visited[nrow][ncol] == 0 && grid[nrow][ncol] == 1){
                dfs( nrow , ncol , temp , visited , grid , directions , base);
            }
        }
    }
  
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n = grid.size();//row
        int m = grid[0].size();//col
        vector<vector<int>> visited( n , vector<int>( m, 0));
        //here we will gonna use the set to store the distinct islands
        //here we will gonna use the base to minus every cell
        //so that if some island follows the same pattern like goinf left then up then right and last down
        //it will be stored same bcz we are going to minus the base
        set<vector<pair<int,int>>> s;
        //directions
        vector<pair<int,int>> directions = {{0,-1} , {-1,0} , {0,1} , {1,0}};
        for( int i = 0 ; i < n ; i++){
            for( int j = 0  ; j < m ; j++){
                if( visited[i][j] == 0 && grid[i][j] == 1){
                    // as we will be having some connected components so if it is first time encountering 1
                    //then that will be our base
                    pair<int,int> base = {i,j};
                    //we will store the connected cells in a vector of pairs
                    vector<pair<int,int>> temp;
                    dfs( i , j , temp , visited , grid , directions , base);
                    //then we will store it in the set
                    s.insert(temp);
                }
            }
        }

        //now the answer would be the number of distincts value in the set
        return s.size();
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}
// } Driver Code Ends
