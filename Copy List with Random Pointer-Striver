/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (head == NULL) return NULL;

        // Step 1: Create new nodes and insert them in between the original nodes
        Node* temp = head;
        while (temp != NULL) {
            Node* newNode = new Node(temp->val);
            newNode->next = temp->next;
            temp->next = newNode;
            temp = temp->next->next;
        }

        // Step 2: Update random pointers of the new nodes
        temp = head;
        while (temp != NULL) {
            if (temp->random != NULL) {
                temp->next->random = temp->random->next;
            }
            temp = temp->next->next;
        }

        // Step 3: Separate the original and copied lists
        Node* new_head = head->next;
        temp = head;
        while (temp != NULL) {
            Node* copiedNode = temp->next;
            temp->next = copiedNode->next;
            if (copiedNode->next != NULL) {
                copiedNode->next = copiedNode->next->next;
            }
            temp = temp->next;
        }

        return new_head;
    }
};
