//recursive approach

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        if( root == nullptr) return ans;
        rec( root , ans);
        return ans;
    }

    void rec( TreeNode* root , vector<int>& ans){
        if( root == nullptr) return;
        //go left
        rec( root -> left , ans);
        //push the data
        ans.push_back( root -> val);
        //go right
        rec( root -> right , ans);
    }
};

//iterative approach
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        if( root == nullptr) return ans;
        stack<TreeNode*> s;
        TreeNode* node = root;
        while( true){
            if(node != nullptr){
                s.push( node);
                node = node -> left;
            }
            else{
                if( s.empty()) break;
                TreeNode* temp = s.top();
                s.pop();
                node = temp -> right;
                ans.push_back( temp -> val);
            }
        }
        return ans;
    }

};
